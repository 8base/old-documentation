diff --git a/.DS_Store b/.DS_Store
new file mode 100644
index 0000000..3fe01c7
Binary files /dev/null and b/.DS_Store differ
diff --git a/.all-contributorsrc b/.all-contributorsrc
new file mode 100644
index 0000000..79c85a1
--- /dev/null
+++ b/.all-contributorsrc
@@ -0,0 +1,71 @@
+{
+  "projectName": "Documentation",
+  "projectOwner": "8base",
+  "repoType": "github",
+  "repoHost": "https://github.com",
+  "files": [
+    "README.md"
+  ],
+  "imageSize": 100,
+  "commit": false,
+  "contributorsPerLine": 7,
+  "badgeTemplate": "[![All Contributors](https://img.shields.io/badge/all_contributors-<%= contributors.length %>-orange.svg?style=flat-square)](#contributors)",
+  "types": {
+    "8base": {
+      "symbol": "🎱",
+      "description": "8base",
+      "link": "[<%= symbol %>](\"<%= description %>\"),"
+    }
+  },
+  "contributors": [
+    {
+      "login": "kelseyyim",
+      "name": "Kelsey Yim",
+      "avatar_url": "https://avatars3.githubusercontent.com/u/32113193?v=4",
+      "profile": "https://github.com/kelseyyim",
+      "contributions": [
+        "doc"
+      ]
+    },
+    {
+      "login": "sebscholl",
+      "name": "Seb Scholl",
+      "avatar_url": "https://avatars3.githubusercontent.com/u/13649537?v=4",
+      "profile": "https://github.com/sebscholl",
+      "contributions": [
+        "doc",
+        "8base",
+        "bug",
+        "ideas"
+      ]
+    },
+    {
+      "login": "marktani",
+      "name": "Nilan Marktanner",
+      "avatar_url": "https://avatars1.githubusercontent.com/u/1780597?v=4",
+      "profile": "https://twitter.com/_marktani",
+      "contributions": [
+        "doc"
+      ]
+    },
+    {
+      "login": "mikeaustin",
+      "name": "Mike Austin",
+      "avatar_url": "https://avatars1.githubusercontent.com/u/343144?v=4",
+      "profile": "https://github.com/mikeaustin",
+      "contributions": [
+        "doc"
+      ]
+    },
+    {
+      "login": "darkbasic",
+      "name": "Niccolò Belli",
+      "avatar_url": "https://avatars1.githubusercontent.com/u/1047358?v=4",
+      "profile": "http://www.linuxsystems.it/",
+      "contributions": [
+        "bug"
+      ]
+    }
+  ],
+  "commitConvention": "none"
+}
diff --git a/.gitbook.yaml b/.gitbook.yaml
new file mode 100644
index 0000000..58bfa36
--- /dev/null
+++ b/.gitbook.yaml
@@ -0,0 +1,5 @@
+root: ./
+
+structure:
+  readme: README.md
+  summary: SUMMARY.md
diff --git a/.gitbook/.DS_Store b/.gitbook/.DS_Store
new file mode 100644
index 0000000..e2cc833
Binary files /dev/null and b/.gitbook/.DS_Store differ
diff --git a/.gitbook/assets/.DS_Store b/.gitbook/assets/.DS_Store
new file mode 100644
index 0000000..2358e8a
Binary files /dev/null and b/.gitbook/assets/.DS_Store differ
diff --git a/.gitbook/assets/2b505e4-fireshot_capture_010_-_8base_-_app.8base.com.png b/.gitbook/assets/2b505e4-fireshot_capture_010_-_8base_-_app.8base.com.png
new file mode 100644
index 0000000..b274368
Binary files /dev/null and b/.gitbook/assets/2b505e4-fireshot_capture_010_-_8base_-_app.8base.com.png differ
diff --git a/.gitbook/assets/44df042-fireshot_capture_004_-_8base_-_app.8base.com.png b/.gitbook/assets/44df042-fireshot_capture_004_-_8base_-_app.8base.com.png
new file mode 100644
index 0000000..a03d424
Binary files /dev/null and b/.gitbook/assets/44df042-fireshot_capture_004_-_8base_-_app.8base.com.png differ
diff --git a/.gitbook/assets/51fbda9-fireshot_capture_009_-_8base_-_app.8base.com.png b/.gitbook/assets/51fbda9-fireshot_capture_009_-_8base_-_app.8base.com.png
new file mode 100644
index 0000000..372d589
Binary files /dev/null and b/.gitbook/assets/51fbda9-fireshot_capture_009_-_8base_-_app.8base.com.png differ
diff --git a/.gitbook/assets/8base-env-variables.png b/.gitbook/assets/8base-env-variables.png
new file mode 100644
index 0000000..9b1d6e1
Binary files /dev/null and b/.gitbook/assets/8base-env-variables.png differ
diff --git a/.gitbook/assets/8base-logo.png b/.gitbook/assets/8base-logo.png
new file mode 100644
index 0000000..11ad1be
Binary files /dev/null and b/.gitbook/assets/8base-logo.png differ
diff --git a/.gitbook/assets/add-field (1).png b/.gitbook/assets/add-field (1).png
new file mode 100644
index 0000000..9f1a5ef
Binary files /dev/null and b/.gitbook/assets/add-field (1).png differ
diff --git a/.gitbook/assets/add-field.png b/.gitbook/assets/add-field.png
new file mode 100644
index 0000000..9f1a5ef
Binary files /dev/null and b/.gitbook/assets/add-field.png differ
diff --git a/.gitbook/assets/api-explorer-query-variables.png b/.gitbook/assets/api-explorer-query-variables.png
new file mode 100644
index 0000000..d9a958a
Binary files /dev/null and b/.gitbook/assets/api-explorer-query-variables.png differ
diff --git a/.gitbook/assets/api-explorer-variables-examples.png b/.gitbook/assets/api-explorer-variables-examples.png
new file mode 100644
index 0000000..70088aa
Binary files /dev/null and b/.gitbook/assets/api-explorer-variables-examples.png differ
diff --git a/.gitbook/assets/auth-own-auth0.png b/.gitbook/assets/auth-own-auth0.png
new file mode 100644
index 0000000..89df787
Binary files /dev/null and b/.gitbook/assets/auth-own-auth0.png differ
diff --git a/.gitbook/assets/c890144-screenshot_2019-05-12_09.23.51.png b/.gitbook/assets/c890144-screenshot_2019-05-12_09.23.51.png
new file mode 100644
index 0000000..87a2e5d
Binary files /dev/null and b/.gitbook/assets/c890144-screenshot_2019-05-12_09.23.51.png differ
diff --git a/.gitbook/assets/cf-searching-logs.gif b/.gitbook/assets/cf-searching-logs.gif
new file mode 100644
index 0000000..75f9574
Binary files /dev/null and b/.gitbook/assets/cf-searching-logs.gif differ
diff --git a/.gitbook/assets/cli-login-success (1).png b/.gitbook/assets/cli-login-success (1).png
new file mode 100644
index 0000000..393b9f8
Binary files /dev/null and b/.gitbook/assets/cli-login-success (1).png differ
diff --git a/.gitbook/assets/cli-login-success.png b/.gitbook/assets/cli-login-success.png
new file mode 100644
index 0000000..393b9f8
Binary files /dev/null and b/.gitbook/assets/cli-login-success.png differ
diff --git a/.gitbook/assets/create-role.png b/.gitbook/assets/create-role.png
new file mode 100644
index 0000000..4389da3
Binary files /dev/null and b/.gitbook/assets/create-role.png differ
diff --git a/.gitbook/assets/create-workspace.png b/.gitbook/assets/create-workspace.png
new file mode 100644
index 0000000..2b2d462
Binary files /dev/null and b/.gitbook/assets/create-workspace.png differ
diff --git a/.gitbook/assets/data-builder-delete-table.png b/.gitbook/assets/data-builder-delete-table.png
new file mode 100644
index 0000000..0d21044
Binary files /dev/null and b/.gitbook/assets/data-builder-delete-table.png differ
diff --git a/.gitbook/assets/data-builder-field-update.png b/.gitbook/assets/data-builder-field-update.png
new file mode 100644
index 0000000..aea2f80
Binary files /dev/null and b/.gitbook/assets/data-builder-field-update.png differ
diff --git a/.gitbook/assets/data-builder-making-relationships.gif b/.gitbook/assets/data-builder-making-relationships.gif
new file mode 100644
index 0000000..d57c27f
Binary files /dev/null and b/.gitbook/assets/data-builder-making-relationships.gif differ
diff --git a/.gitbook/assets/data-builder-new-table.gif b/.gitbook/assets/data-builder-new-table.gif
new file mode 100644
index 0000000..9e07dc1
Binary files /dev/null and b/.gitbook/assets/data-builder-new-table.gif differ
diff --git a/.gitbook/assets/data-builder-new-table.png b/.gitbook/assets/data-builder-new-table.png
new file mode 100644
index 0000000..7536178
Binary files /dev/null and b/.gitbook/assets/data-builder-new-table.png differ
diff --git a/.gitbook/assets/data-query (1).png b/.gitbook/assets/data-query (1).png
new file mode 100644
index 0000000..b3b6385
Binary files /dev/null and b/.gitbook/assets/data-query (1).png differ
diff --git a/.gitbook/assets/data-query.png b/.gitbook/assets/data-query.png
new file mode 100644
index 0000000..b3b6385
Binary files /dev/null and b/.gitbook/assets/data-query.png differ
diff --git a/.gitbook/assets/data-viewer-add.png b/.gitbook/assets/data-viewer-add.png
new file mode 100644
index 0000000..53d4197
Binary files /dev/null and b/.gitbook/assets/data-viewer-add.png differ
diff --git a/.gitbook/assets/data-viewer-create-user.png b/.gitbook/assets/data-viewer-create-user.png
new file mode 100644
index 0000000..6471320
Binary files /dev/null and b/.gitbook/assets/data-viewer-create-user.png differ
diff --git a/.gitbook/assets/data-viewer-edit.png b/.gitbook/assets/data-viewer-edit.png
new file mode 100644
index 0000000..cae08d0
Binary files /dev/null and b/.gitbook/assets/data-viewer-edit.png differ
diff --git a/.gitbook/assets/data-viewer-file-delete.png b/.gitbook/assets/data-viewer-file-delete.png
new file mode 100644
index 0000000..732f7b6
Binary files /dev/null and b/.gitbook/assets/data-viewer-file-delete.png differ
diff --git a/.gitbook/assets/data-viewer-filtering.png b/.gitbook/assets/data-viewer-filtering.png
new file mode 100644
index 0000000..02f0961
Binary files /dev/null and b/.gitbook/assets/data-viewer-filtering.png differ
diff --git a/.gitbook/assets/data-viewer-import.gif b/.gitbook/assets/data-viewer-import.gif
new file mode 100644
index 0000000..060b7c4
Binary files /dev/null and b/.gitbook/assets/data-viewer-import.gif differ
diff --git a/.gitbook/assets/data-viewer-import.png b/.gitbook/assets/data-viewer-import.png
new file mode 100644
index 0000000..1b25939
Binary files /dev/null and b/.gitbook/assets/data-viewer-import.png differ
diff --git a/.gitbook/assets/data-viewer-selected-fields.png b/.gitbook/assets/data-viewer-selected-fields.png
new file mode 100644
index 0000000..4b1a80c
Binary files /dev/null and b/.gitbook/assets/data-viewer-selected-fields.png differ
diff --git a/.gitbook/assets/data-viewer-sorting.png b/.gitbook/assets/data-viewer-sorting.png
new file mode 100644
index 0000000..34277b9
Binary files /dev/null and b/.gitbook/assets/data-viewer-sorting.png differ
diff --git a/.gitbook/assets/data-viewer-upload.png b/.gitbook/assets/data-viewer-upload.png
new file mode 100644
index 0000000..5968d05
Binary files /dev/null and b/.gitbook/assets/data-viewer-upload.png differ
diff --git a/.gitbook/assets/data-viewer.png b/.gitbook/assets/data-viewer.png
new file mode 100644
index 0000000..6ada643
Binary files /dev/null and b/.gitbook/assets/data-viewer.png differ
diff --git a/.gitbook/assets/delete-role.png b/.gitbook/assets/delete-role.png
new file mode 100644
index 0000000..d1f1fdd
Binary files /dev/null and b/.gitbook/assets/delete-role.png differ
diff --git a/.gitbook/assets/demo-app-properties (1).png b/.gitbook/assets/demo-app-properties (1).png
new file mode 100644
index 0000000..1ba6945
Binary files /dev/null and b/.gitbook/assets/demo-app-properties (1).png differ
diff --git a/.gitbook/assets/demo-app-properties.png b/.gitbook/assets/demo-app-properties.png
new file mode 100644
index 0000000..1ba6945
Binary files /dev/null and b/.gitbook/assets/demo-app-properties.png differ
diff --git a/.gitbook/assets/demo-data-viewer (1).png b/.gitbook/assets/demo-data-viewer (1).png
new file mode 100644
index 0000000..c9b8c15
Binary files /dev/null and b/.gitbook/assets/demo-data-viewer (1).png differ
diff --git a/.gitbook/assets/demo-data-viewer.png b/.gitbook/assets/demo-data-viewer.png
new file mode 100644
index 0000000..c9b8c15
Binary files /dev/null and b/.gitbook/assets/demo-data-viewer.png differ
diff --git a/.gitbook/assets/e47095d-fireshot_capture_008_-_8base_-_app.8base.com.png b/.gitbook/assets/e47095d-fireshot_capture_008_-_8base_-_app.8base.com.png
new file mode 100644
index 0000000..795e0ca
Binary files /dev/null and b/.gitbook/assets/e47095d-fireshot_capture_008_-_8base_-_app.8base.com.png differ
diff --git a/.gitbook/assets/openid-env-variables.png b/.gitbook/assets/openid-env-variables.png
new file mode 100644
index 0000000..914eebc
Binary files /dev/null and b/.gitbook/assets/openid-env-variables.png differ
diff --git a/.gitbook/assets/openid-settings.png b/.gitbook/assets/openid-settings.png
new file mode 100644
index 0000000..b362324
Binary files /dev/null and b/.gitbook/assets/openid-settings.png differ
diff --git a/.gitbook/assets/permissons-webhook-vars-example.png b/.gitbook/assets/permissons-webhook-vars-example.png
new file mode 100644
index 0000000..54ebce7
Binary files /dev/null and b/.gitbook/assets/permissons-webhook-vars-example.png differ
diff --git a/.gitbook/assets/relaxed-coder.png b/.gitbook/assets/relaxed-coder.png
new file mode 100644
index 0000000..c4d0834
Binary files /dev/null and b/.gitbook/assets/relaxed-coder.png differ
diff --git a/.gitbook/assets/role-permissions-apps.png b/.gitbook/assets/role-permissions-apps.png
new file mode 100644
index 0000000..5eba769
Binary files /dev/null and b/.gitbook/assets/role-permissions-apps.png differ
diff --git a/.gitbook/assets/role-permissions-data.png b/.gitbook/assets/role-permissions-data.png
new file mode 100644
index 0000000..9e4bda5
Binary files /dev/null and b/.gitbook/assets/role-permissions-data.png differ
diff --git a/.gitbook/assets/role-permissions-users.png b/.gitbook/assets/role-permissions-users.png
new file mode 100644
index 0000000..c5dc46e
Binary files /dev/null and b/.gitbook/assets/role-permissions-users.png differ
diff --git a/.gitbook/assets/roles-and-permissions-custom-filter-create.png b/.gitbook/assets/roles-and-permissions-custom-filter-create.png
new file mode 100644
index 0000000..d1fa94e
Binary files /dev/null and b/.gitbook/assets/roles-and-permissions-custom-filter-create.png differ
diff --git a/.gitbook/assets/roles-index.png b/.gitbook/assets/roles-index.png
new file mode 100644
index 0000000..6866ba4
Binary files /dev/null and b/.gitbook/assets/roles-index.png differ
diff --git a/.gitbook/assets/signon-provider-config.png b/.gitbook/assets/signon-provider-config.png
new file mode 100644
index 0000000..75827bf
Binary files /dev/null and b/.gitbook/assets/signon-provider-config.png differ
diff --git a/.gitbook/assets/signon-provider-form.png b/.gitbook/assets/signon-provider-form.png
new file mode 100644
index 0000000..3306300
Binary files /dev/null and b/.gitbook/assets/signon-provider-form.png differ
diff --git a/.gitbook/assets/signup-screen (1).png b/.gitbook/assets/signup-screen (1).png
new file mode 100644
index 0000000..222d625
Binary files /dev/null and b/.gitbook/assets/signup-screen (1).png differ
diff --git a/.gitbook/assets/signup-screen.png b/.gitbook/assets/signup-screen.png
new file mode 100644
index 0000000..222d625
Binary files /dev/null and b/.gitbook/assets/signup-screen.png differ
diff --git a/.gitbook/assets/workspace-api-endpoint.png b/.gitbook/assets/workspace-api-endpoint.png
new file mode 100644
index 0000000..b699709
Binary files /dev/null and b/.gitbook/assets/workspace-api-endpoint.png differ
diff --git a/.gitbook/assets/workspace-menu (1).png b/.gitbook/assets/workspace-menu (1).png
new file mode 100644
index 0000000..dfd6167
Binary files /dev/null and b/.gitbook/assets/workspace-menu (1).png differ
diff --git a/.gitbook/assets/workspace-menu.png b/.gitbook/assets/workspace-menu.png
new file mode 100644
index 0000000..dfd6167
Binary files /dev/null and b/.gitbook/assets/workspace-menu.png differ
diff --git a/.gitbook/assets/zen-developer.png b/.gitbook/assets/zen-developer.png
new file mode 100644
index 0000000..38cf819
Binary files /dev/null and b/.gitbook/assets/zen-developer.png differ
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..2b255bd
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,2 @@
+node_modules
+TRACKER.md
diff --git a/8base-console/READme.md b/8base-console/READme.md
new file mode 100644
index 0000000..17a1749
--- /dev/null
+++ b/8base-console/READme.md
@@ -0,0 +1,20 @@
+# What's the 8base Management Console?
+
+The 8base Management Console allows for convenient and fine-grained administration of your data and applications built on 8base. The secure, easy-to-access and beautifully designed web portal can be accessed from any computer, allowing teams to collaborate and build MVP to Enterprise ready applications.
+
+To get started quickly with the 8base Management Console, all you'll need is [an 8base account](https://app.8base.com) and a modern web browser.
+
+![ ](../.gitbook/assets/relaxed-coder.png)
+
+### Console Overview
+
+* Create and manage custom data tables for relational data
+* Browse, sort, filter and learn from your app data in the cloud
+* Customize and enforce fine-grained user authorization controls
+* Review performance logs for custom serverless functions
+* Query, mutate and subscribe to your data through GraphQL API Explorer
+* Administer users and review application usage metrics
+* Update teams, environment variables, API tokens, and other settings
+
+
+Learn more in the next chapter!
diff --git a/8base-console/authentication.md b/8base-console/authentication.md
new file mode 100644
index 0000000..a532118
--- /dev/null
+++ b/8base-console/authentication.md
@@ -0,0 +1,213 @@
+# Authentication
+
+Every 8base workspace initializes with native support for signing up, managing, and authorizing your application's Users. This feature eliminates the requirement of managing emails and passwords or social sign-on providers without compromising on access to your user data.
+
+## Users
+**Users** is defined as a *System Table* in 8base, meaning that the table is added and required in every workspace. That said, it's fully customizable using the Data Builder and can be configured to your application's requirements.
+
+By default, the Users table has the following fields defined.
+
+```javascript
+{
+    id: ID
+    _description: String
+    createdAt: DateTime
+    updatedAt: DateTime
+    createdBy: User
+    email: String
+    is8base: Boolean
+    firstName: String
+    lastName: String
+    cellPhone: String
+    workPhone: String
+    workPhoneExt: String
+    gender: String
+    birthday: String
+    language: String
+    timezone: String
+    avatar: File
+    sentInvitations: Array
+    permissions: Array
+    roles: Array
+}
+````
+
+### Managing Users in the Console
+In most applications, Users records are created as a part of a sign-up flow. However, in situations where a User must be created, updated, or deleted manually by an admin, it's easy to do so using the Data Viewer pane when reviewing the Users table.
+
+![Creating a user in the 8base Management Console](../.gitbook/assets/data-viewer-create-user.png)
+
+## Authorization
+Under the hood, 8base utilizes [Auth0](https://auth0.com/) to manage your users' identities and ensure the best security standards. All user accounts are by default stored in an Auth0 account that's managed by 8base. For upgraded workspace plans, the option of connecting one's Auth0 account or an OpenID provider is available.
+
+### 8base Authentication
+{% youtube src="https://www.youtube.com/watch?v=BTexF_yxrC0&feature=youtu.be" %}{% endyoutube %}
+
+To create an *Authentication Profile*, navigate to the `Settings > Authentication` and press the `+` button. The form that appears can be completed using the following fields described.
+
+* **Name**: A name that describes what this profile does. In this sample case, you can replace My Auth in the screenshot above with a name like Guest User Auth.
+
+* **Type**: Select 8base authentication
+
+* **Self Signup**: Open allows users to self-register. Otherwise, you can restrict access to only invited users or users within a specific domain (i.e., '@company.com').
+
+* **Roles**: Roles can be either Guest, Administrator, or any custom role. Multiple-roles can be selected.
+
+#### Client information
+An authentication profile's corresponding client-side information is generated once created. Client-side information allows for connecting client applications to the 8base back-end and any corresponding authentication settings. Client ID and Domain are not sensitive strings and are added to one or more client apps.
+
+#### Configure Callback URLs
+A callback URL is an endpoint that is invoked after a user authenticates. Users are not able to log into an application and receive an error if this field is left empty. By default, the callback URL `http://localhost:3000/auth/callback` is set. Keep it, or replace it with an existing URL from your application.
+
+#### Configure Logout URLs
+The logout URL is where a user is sent after logging out. Specify them in the Allowed Logout URLs field. The default logout URL is http://localhost:3000/ and attempting to log out when no logout URL was provided displays an error.
+
+### Your Own Auth0 Account
+There are only a few steps required to set up your Auth0 account on 8base. First, navigate to the `Settings > Authentication` of your workspace and create a new *Authentication Profile*. In the form that appears, select *Your Auth0 Account*.
+
+All required information is in the settings of your Auth0 account.
+
+![Connecting your Auth0 account](../.gitbook/assets/auth-own-auth0.png)
+
+### OpenID Connect
+The ability to set up an authentication provider that supports the OpenID specification is available for workspaces on a *Professional* or *Enterprise* plan. Some light setup required in the Management Console and a custom *resolver* function needs to be deployed to your project's workspace to use this feature.
+
+### Sign-on Providers
+Sign-on providers can easily be enabled/disabled in the *8base Authentication Settings* section of the workspace's Authentication view. At least one authentication profile with the type set to "8base Authentication" is required to use this feature.
+
+![Creating an Authentication Profile](../.gitbook/assets/signon-provider-form.png)
+
+Each sign-on provider requires a *Client ID* and *Client Secret*. These credentials are collected from the sign-on provider(s) you want to configure. Once collected, enter the credentials into the relevant sign-on provider form before clicking "Enable Sign-On Provider" and "Save."
+
+![Enabling a Sign-on Provider](../.gitbook/assets/signon-provider-config.png)
+
+#### Configuring the OpenID Settings
+In the 8base Management Console, you're able to configure one or more authentication providers under `Settings > Authentication`. Click the "+" button and fill out the provider form, selecting *OpenID* as the type and adding an OpenID Provider URL. Once completed, the record is saved to your *Authentication Profiles*.
+
+![Adding an OpenID Authentication Provider in 8base](../.gitbook/assets/openid-settings.png)
+
+#### getToken Resolver
+A custom *getToken* resolver mutation function must be deployed to the workspace. This can be done by installing the [8base CLI](../development-tools/cli/README.md).
+
+In the provided *getToken* function, the relevant environment variables are accessed - if set in the Management Console - to provide the required credentials and configurations. A request is then made to the authentication provider to query or create the authenticating user from the database and return the user's token.
+
+{% code-tabs %}
+{% code-tabs-item title="8base.yml" %}
+```yaml
+functions:
+  getToken:
+    handler:
+      code: src/getToken.ts
+    type: resolver
+    schema: src/getToken.graphql
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="handler.js" %}
+```javascript
+const { URLSearchParams } = require('url');
+const fetch = require('node-fetch');
+const gql = require('graphql-tag');
+const jwtDecode = require('jwt-decode');
+
+const APP_ID_CLIENT_ID = process.env.APP_ID_CLIENT_ID;
+const APP_ID_TENANT_ID = process.env.APP_ID_TENANT_ID;
+const APP_ID_SECRET = process.env.APP_ID_SECRET;
+const APP_ID_URL = process.env.APP_ID_URL;
+const TOKEN_PATH = '/token';
+
+const CLIENT_REDIRECT_URI = process.env.CLIENT_REDIRECT_URI;
+
+const CURRENT_USER_QUERY = gql`
+  query CurrentUser {
+    user {
+      id
+      email
+    }
+  }
+`;
+
+const USER_SIGN_UP_MUTATION = gql`
+  mutation UserSignUp($user: UserCreateInput!, $authProfileId: ID) {
+    userSignUpWithToken(user: $user, authProfileId: $authProfileId) {
+      id
+      email
+    }
+  }
+`;
+
+export default async (event: any, context: any) => {
+  const body = new URLSearchParams();
+
+  body.append('grant_type', 'authorization_code');
+  body.append('code', event.data.code);
+  body.append('client_id', APP_ID_CLIENT_ID);
+  body.append('redirect_uri', CLIENT_REDIRECT_URI);
+
+  let token;
+  let email;
+
+  try {
+    let tokenResponse = await fetch(`${APP_ID_URL}${APP_ID_TENANT_ID}/${TOKEN_PATH}`, {
+      body,
+      headers: {
+        'Authorization': 'Basic ' + Buffer.from(`${APP_ID_CLIENT_ID}:${APP_ID_SECRET}`).toString('base64'),
+        'Content-Type': 'application/x-www-form-urlencoded'
+        'Accept': 'application/json',
+      },
+      method: 'post',
+    });
+
+    ({ id_token: token } = await tokenResponse.json());
+
+    try  {
+      await context.api.gqlRequest(CURRENT_USER_QUERY, {}, {
+        authorization: token,
+      });
+    } catch (e) {
+      ({ email } = jwtDecode(token));
+
+      await context.api.gqlRequest(USER_SIGN_UP_MUTATION, {
+        user: {
+          email,
+        },
+        authProfileId: event.data.authProfileId,
+      }, {
+        authorization: token,
+      });
+    }
+  } catch (e) {
+    console.log(e);
+    throw Error('Authorization Error');
+  }
+
+  return {
+    data: {
+      token,
+    },
+  };
+};
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="schema.graphql" %}
+```javascript
+type TokenResult {
+  token: String!
+}
+
+extend type Mutation {
+  getToken(code: String!, authProfileId: ID!): TokenResult
+}
+
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+#### Setting Environment Variables
+To set environment variables that can be accessed from within custom functions, open up your workspace, and navigate to `Settings > Environment Variables`. Here, any key-value pair may be securely stored and accessed from within your functions at `process.env.<ENV_VARIABLE_KEYNAME>`.
+
+![Environment variables manager in the 8base Management Console](../.gitbook/assets/openid-env-variables.png)
+
+#### Troubleshooting
+If you're unable to get the authentication provider to work and are receiving a "Not Authorized" error message, you may need to update the associated role and its API permissions. You can do this by first ensuring that the configured provider has an associated role, like *Guest*. Next, navigate to `Settings > Roles > [ROLE_NAME] > Data` and ensure that the role is enabled for the *Get Token* function call.
\ No newline at end of file
diff --git a/8base-console/custom-functions/README.md b/8base-console/custom-functions/README.md
new file mode 100644
index 0000000..82a79ca
--- /dev/null
+++ b/8base-console/custom-functions/README.md
@@ -0,0 +1,95 @@
+# Custom Functions
+
+In 8base, pretty much everything is extensible when using *Custom Functions* (CFs). If you want to extend your GraphQL API, add custom endpoints, or build some other server side functionality, CFs will be the answer. So, how do they work?
+
+CFs in 8base are essentially AWS Lambdas that get enriched with access to your workspace resources. For example, 8base makes sure you're able to access the workspace's environment variables and database from within a CF by default. CFs can be written in either JavaScript or TypeScript (we'll package them for you... so no need to worry about Babel) and be deployed in a matter of minutes.
+
+### Highlights
+* **Serverless execution:** Once deployed, CFs are ready to scale from 1 to 1,000,000+ calls thanks to serverless design
+* **JavaScript + TypeScript:** Write in JavaScript or TypeScript and 8base will compile it as needed
+* **Predefined Triggers:** 8base currently offers four types of CF triggers that will cover 99.999% of requirements
+* **Easily Permissioned:** As with most 8base features, authorizing CFs can be easily configured in the *Role Manager*
+
+### Custom Function Types
+There are 4-types of CFs made available on 8base that we will go over in depth in the following 4 sections. They are:
+
+* [**Resolvers**](./resolvers.md): For extending your GraphQL API
+* [**Webhooks**](./webhooks.md): For RESTful endpoints (GET, POST, DELETE, etc...)
+* [**Triggers**](./triggers.md): For functions requiring event-based execution
+* [**Tasks**](./tasks.md): For invocable and scheduled (cron) functions
+
+All CFs must be declared in your projects 8base.yml file.
+
+### Custom Function Arguments
+All CFs receive the same function arguments when invoked; *event* and *ctx*. These arguments are positional, so you may rename them to whatever names you prefer.
+
+##### event
+When a CF is invoked, 8base will attempt to parse the request body and query string to add any parsed values to `event.data` attribute. However, the raw request body will always be available on at `event.body`. The `event` argument can be expected to have the following structure:
+
+```json
+{
+	"event": {
+	  "data": {
+	    "arg1": "arg1 value",
+	    "arg2": "arg2 value"
+	  },
+	  "headers": {
+	    "x-header-1": "header value",
+	    "x-header-2": "header value"
+	  },
+	  "body": "raw request body"
+	}
+}
+```
+##### ctx
+The context argument - `ctx` - exposes 8base GraphQL and other APIs. It can be used to run Queries and Mutations from inside the CF and to call other functions.
+
+```javascript
+// Code...
+ctx.api.gqlRequest(QUERY, { ...variables });
+```
+
+The `gqlRequest` method accepts an optional options object as it's third argument. On that `options` object, the `checkPermissions` option is available. By default, `checkPermissions=true` and any query run from inside the function gets scoped to the requester's permissions. When set to `false`, the query runs without checking permissions.
+
+```javascript
+if (runWithRolesEnforced) {
+	ctx.api.gqlRequest(QUERY, VARIABLES);
+} 
+else if (runWithoutRolesEnforced) {
+	ctx.api.gqlRequest(QUERY, VARIABLES, { checkPermissions: false });
+}
+```
+
+For obvious security reasons, `checkPermissions` is ONLY available from within custom functions. It cannot be used when making requests from client applications.
+
+### Managing Dependencies
+8base deploys CFs to a Node.js 8.10 runtime environment in which any compatible NPM dependencies are supported. On deploy, the system will check whether or not your dependencies have been installed and handle that accordingly. As expected, deploys run significantly faster when dependencies are installed locally. Feel free to use either NPM or Yarn as your package manager during development.
+
+### Development Tips
+CFs are developed in a local development environment and then deployed to a given workspace using the [8base CLI](../../development-tools/cli/README.md). When in development, they can be invoked locally for testing purposes. 
+
+Using the `8base generate` command is recommended when creating new functions. Doing so provides a recommended folder structure that helps keep everything organized when developing CFs locally, including a `mocks` directory and management of the `8base.yml` file.
+
+```bash
+$ 8base generate resolver findPossumly
+
+=> Updated file 8base.yml
+Created file src/resolvers/findPossumly/handler.ts
+Created file src/resolvers/findPossumly/mocks/request.json
+Created file src/resolvers/findPossumly/schema.graphql
+
+Boom! Your new findPossumly function has been successfully generated. To add any required settings, check out its configuration block in your projects 8base.yml file.
+```
+
+Inside a functions `handler.(js|ts)` file the command that's needed to begin invoking the function locally get automatically generated - along with the required resources for its execution. The benefit of this is the ability to quickly test your functions locally using the CLI and a well defined request object.
+
+```javascript
+/**
+ * src/resolvers/findPossumly/handler.ts
+ * 
+ * To invoke this function locally, run:
+ *  8base invoke-local findPossumly -p src/resolvers/findPossumly/mocks/request.json
+ */
+
+// Code...
+```
diff --git a/8base-console/custom-functions/debugging.md b/8base-console/custom-functions/debugging.md
new file mode 100644
index 0000000..4914070
--- /dev/null
+++ b/8base-console/custom-functions/debugging.md
@@ -0,0 +1,69 @@
+# Debugging
+
+Custom Functions (CFs) can get debugged in production and when developing locally. While there are many ways to debug code, and specific IDEs that provide special tooling, here we're addressing the most general ways to debug custom functions in 8base.
+
+### Production Debugging
+![Production logs for custom functions](../../.gitbook/assets/cf-searching-logs.gif)
+
+When a CF gets deployed to a workspace it becomes visible in the `Logic` screen on the 8base console. This both confirms that the function was successfully deployed and is where the CFs execution logs can get reviewed and tailed in real-time. Logs report each request uniquely.
+
+```bash
+START RequestId: 250be4db-cac4-425a-9d4c-24f94ccefd7f Version: $LATEST
+END RequestId: 250be4db-cac4-425a-9d4c-24f94ccefd7f
+REPORT RequestId: 250be4db-cac4-425a-9d4c-24f94ccefd7f Duration: 0.54 ms Billed Duration: 100 ms Memory Size: 1536 MB Max Memory Used: 88 MB XRAY TraceId: 1-5d794811-0a64a1f6f0c03eb43a0df3b0 SegmentId: 3353cda75bd91f53 Sampled: false
+``` 
+
+Using the `console.log` and `console.error` methods inside of a CF will output any given argument to the execution logs. Knowing this, a developer has the flexibility to enrich their logs as needed, as well as output arguments for debugging purposes.
+
+```javascript
+export default async (event: any, ctx: any) : Promise<LocalizeResult> => {
+  /* To inspecting the event.data object in production */
+  console.log('DEBUG: ', event.data);
+  // more code
+```
+
+### Local Debugging
+The suggested method for debugging CFs locally requires a Chrome browser. Once installed, add this script to the project’s package.json file:
+
+```json
+"scripts": {
+  "debug": "node --inspect $(npm root -g)/8base-cli/dist/index.js "
+}
+```
+
+The script runs `node --inspect`, and then finds the path to the `8base-cli` package installed globally on the machine - building a path to the executable (e.g., `/usr/local/lib/node_modules/8base-cli/dist/index.js`). Whether yarn or npm is being used won’t matter.
+
+Next, place a `debugger` in the code where you want to pause the execution. When debugging an error, insure that the `debugger` is placed *before* error occurs.
+
+```javascript
+export default async (event: any, ctx: any) : Promise<LocalizeResult> => {
+  // some code
+  debugger;
+  // some error.
+  new DontExist({ something: 'is wrong' });
+```
+
+Before invoking the CF, open Chrome and visit `chrome://inspect`. Click the *Open dedicated DevTools for Node* link. The window that opens is the Chrome developer console where you’re debugger will be stopped.
+
+You can now start debugging the function using the `invoke-local` command.
+
+```bash
+npm run debug invoke-local FUNCTION_NAME -p /path/to/mock.json
+# or
+yarn debug invoke-local FUNCTION_NAME -p /path/to/mock.json
+```
+
+When `invoke-local` is called, the 8base CLI first builds the code before running it. Therefore, it's always the **built** code that is being debugged. This is why the source script being debugged, when shown in the Chrome window, might look unfamiliar.
+
+Know that this doesn't affect any access to scope for the `debugger`, but imported modules and function arguments might have been assigned abstracted names. If you want to inspect a module, it’s better to assign it to a variable so that the name will be the same. For example;
+
+```javascript
+import AWS from 'aws-sdk';
+
+export default async (event: any, ctx: any) : Promise<LocalizeResult> => {
+  // Want to inspect the AWS module?
+  const aws = AWS;
+  // Now in the debugger you can be sure aws variable is available.
+  debugger;
+  // more code
+```
diff --git a/8base-console/custom-functions/resolvers.md b/8base-console/custom-functions/resolvers.md
new file mode 100644
index 0000000..b58bcc5
--- /dev/null
+++ b/8base-console/custom-functions/resolvers.md
@@ -0,0 +1,75 @@
+# Resolvers
+
+A *resolver* is a function type that gets exposed to the GraphQL API and can be directly called from client apps. Resolvers allow you to add custom queries and mutations in addition to the auto-generated CRUD operations 8base handles for you. Resolvers are used to integrate 3rd party APIs, query / coerce data, or run custom algorithms.
+
+### 8base.yml Declaration
+Resolver declarations require a *handler.code*, *type*, and *schema* definition. While the *type* value must equal 'resolver', *handler.code* and *schema* both accept relative path values to the resolver's two required files.
+
+```yaml
+#
+# Both the function handler and GraphQL schema definition
+# must be specified using relative paths in the 8base.yml.
+#
+functions:
+  #
+  # Declare custom GraphQL resolvers like so.
+  paymentResolver:
+    handler:
+      code: src/mutations/payment/handler.js
+    type: resolver
+    schema: src/mutations/payment/schema.graphql
+```
+All resolver functions require unique names. You are able to deploy as many resolvers as you want to a single workspace.
+
+### Schema.graphql
+The `schema.graphql` file defines the GraphQL function and permitted response type. This describes the function name and arguments that the developer connecting to the GraphQL API has available.
+
+```javascript
+type HelloResult {
+  result: String!
+}
+
+extend type Mutation {
+  hello(name: String): HelloResult
+}
+
+// Or alternatively...
+
+extend type Query {
+  hello(name: String): HelloResult
+}
+```
+
+### Resolver Handler
+The `handler.js` file defines the JavaScript function handling the GraphQL call.
+
+```javascript
+module.exports = event => {
+  const name = event.data.name;
+
+  return {
+    data: {
+      result: `Hello ${name}!`
+    }
+  }
+};
+```
+
+### Resolver Arguments
+To learn about the arguments that are passed to resolvers, review the [custom function arguments docs.](./README.md#custom-function-arguments)
+
+### Resolver Response
+
+The value returned by a resolver is allowed two properties: *data* and *errors*. The format of the data property should conform to the schema defined in the `schema.graphql` file.
+
+```javascript
+return {
+  data: {
+    result: "Hello world"
+  },
+  errors: [{
+    message: "Error message",
+    code: "error_code"
+  }]
+}
+```
diff --git a/8base-console/custom-functions/tasks.md b/8base-console/custom-functions/tasks.md
new file mode 100644
index 0000000..a8ac652
--- /dev/null
+++ b/8base-console/custom-functions/tasks.md
@@ -0,0 +1,84 @@
+# Tasks
+
+A *task* is a type of function that can be invoked directly from other functions or executed on a specified interval. This allows for cron job like execution of your custom functions and is great for re-occurring tasks.
+
+
+### 8base.yml
+A task can either be specified to run on a schedule or not. If not, it is then only expected to run whenever called by another custom function. The schedule parameter accepts by the minute, hourly, or daily intervals.
+
+```yaml
+functions:
+  #
+  # Declare tasks like so.
+  sendEmail:
+    handler:
+      code: src/sendEmail.ts
+    type: task
+  #
+  # Declare tasks (scheduled tasks) like so.
+  sendWeeklyReport:
+    handler:
+      code: src/sendWeeklyReport.ts
+    type: task
+    schedule: 'rate(7 days)'
+```
+
+##### Non-scheduled function calls
+Functions like resolvers, triggers and webhooks usually run in response to user actions. Normally, you'd want to return a response to the user as soon as possible while offloading any longer-running processes to background tasks. In order to do so you can use the `invokeFunction(taskName, args, options)` method found on the context argument to invoke a background task.
+
+```javascript
+// Context (ctx) argument maintains the invokeFunction method for
+//invoking tasks from other functions.
+module.exports = async (event, ctx) => {
+  const args = { param: 'value' }
+
+  await context.invokeFunction('myTask', args, {
+    waitForResponse: false
+  })
+}
+```
+
+The `options.waitForResponse (default: false)` property tells the platform to resolve the promise immediately without waiting for the task to complete. If instead you'd like to wait for the task result you can set `waitForResponse` to `true`.
+
+*Note: The value of `args` is passed to the `event.data` property of the invoked task.*
+
+### Scheduled tasks
+You can configure tasks to run on schedule using the `schedule` option in the 8base.yml declaration. The `schedule` parameter accepts two types of expressions: Rate and Cron - both of which specify a scheduled invocation on a re-occuring schedule.
+
+##### Rate expressions
+`rate(Value Unit)`
+
+| Expression | Instruction |
+| :--- | :--- |
+| rate(5 minutes) | Invoke task every 5 minutes |
+| rate(1 hour) | Invoke task every hour |
+| rate(7 days) | Invoke task every seven days |
+
+{% hint style="warning" %}
+##### Singular vs. Plural
+
+For a singular value (1) the unit must be written as singular, otherwise it needs to be plural - rate(**1 day** *vs.* **5 days**).
+{% endhint %}
+
+##### Cron expressions
+`cron(Minutes Hours Day-of-month Month Day-of-week Year)`
+
+| Expression | Instruction |
+| :--- | :--- |
+| cron(0 10 ? *) | Invoke task at 10:00am (UTC) everyday |
+| cron(15 12 ? *) | Invoke task at 12:15pm (UTC) everyday |
+| cron(0 18 ? MON-FRI ) | Invoke task at 06:00pm (UTC) every Mon-Fri |
+| cron(0/10 ? MON-FRI *) | Invoke task every 10 min Mon-Fri |
+| cron(0/5 8-17 ? MON-FRI ) | Invoke task every 5 minutes Mon-Fri between 8:00am and 5:55pm (UTC) |
+| cron(0 9 ? 2#1 ) | Invoke task at 9 a.m. (UTC) the first Monday of each month |
+
+Cron expressions that lead to rates faster than one invocation/minute are not supported. Additionally, one of the day-of-month or day-of-week values must be a question mark (?).
+
+{% hint style="info" %}
+##### Cron Docs
+
+Check example expressions and read a detailed description of cron syntax [here](https://docs.aws.amazon.com/lambda/latest/dg/tutorial-scheduled-events-schedule-expressions.html?shortFooter=true).
+{% endhint %}
+
+### Task Arguments
+To learn about the arguments that are passed to tasks, review the [custom function arguments docs.](./README.md#custom-function-arguments)
diff --git a/8base-console/custom-functions/triggers.md b/8base-console/custom-functions/triggers.md
new file mode 100644
index 0000000..626b33d
--- /dev/null
+++ b/8base-console/custom-functions/triggers.md
@@ -0,0 +1,110 @@
+# Triggers
+
+A *trigger* is a type of function that runs in response to a data mutation event (i.e, while creating, updating or deleting an object). This allows for important actions to run as callbacks to your data commits, without cluttering up client apps with web requests.
+
+### 8base.yml
+There are two type qualifiers for triggers based on whether they run before or after the data is modified: `trigger.before` and `trigger.after`. The `operation` parameter defines what data type and event the trigger should listen to. For example, if we want to execute it after a `User` has been created we should specify `User.create`. Possible values for the data event are `create`, `update` and `delete`.
+
+```yaml
+function:
+  #
+  # Declare custom triggers like so.
+  helloTrigger:
+    handler:
+      code: src/triggerBefor.ts
+    type: trigger.before
+    operation: User.create
+```
+
+{% hint style="info" %}
+##### *operation* Options
+
+When defining an *operation*, use: `<TableName>.(create|update|delete)`
+{% endhint %}
+
+### trigger.before
+This type of trigger is executed before the data is written to the database. It allows you to validate or modify the data before saving it in the database.
+
+```javascript
+module.exports = event => {
+  const { password, passwordConfirm } = event.data;
+
+  if (password != passwordConfirm) {
+    // Throwing an error will cancel the operation and data will not be inserted
+    throw new Error('Passwords don\'t match');
+  }
+
+  // You can modify what goes into the database
+  return {
+    data: {
+      ...event.data,
+      status: 'confirmed'
+    }
+  }
+}
+```
+
+### trigger.after
+
+This type of trigger is executed after the data has been successfully saved in the database. It can be used to do any post-processing or to enrich the returned data. For example, after creating a new calendar event you might want to send an email notification alerting users they were invited.
+
+```javascript
+const sender = require('email-service');
+
+module.exports = async event => {
+  const { invitees } = event.data;
+
+  let sent = false;
+  try {
+    await sender.sendInvites(invitees);
+    sent = true;
+  } catch(e) {
+    console.error('Error sending invites: ', e);
+  }
+
+  // You can modify the returned response
+  return {
+    data: {
+      ...event.data,
+      sent
+    }
+  }
+}
+```
+
+### [Trigger Arguments](./README.md#section-custom-function-arguments)
+
+Alike the [standard custom function arguments](./README.md#section-custom-function-arguments), a *trigger.after* type function receives the output of a mutation in the `event.data` property. However, sometimes parameters that were originally passed in the mutation are needed. Therefore, the `event` object is enriched to have a `event.originalData` property which maintains the original input object.
+
+`event.originalObject` also contains the version of the object before the mutation was applied to it. This is useful when you need to compare objects before and after the mutation to find out what fields changed.
+
+```json
+{
+  // Data returned
+  "data": {...},
+  // Data sent
+  "originalData": {...},
+  // Original data record
+  "originalObject": {...} // or null,
+  // Request headers
+  "headers": {...}
+}
+```
+
+To learn more about the arguments that are passed to triggers, review the [custom function arguments docs.](./README.md#custom-function-arguments)
+
+### Trigger Response
+
+The value returned by a *trigger* is allowed two properties: *data* and *errors*.
+
+```javascript
+return {
+  data: {
+    ...event.data
+  },
+  errors: [{
+    message: "Error message",
+    code: "error_code"
+  }]
+}
+```
diff --git a/8base-console/custom-functions/webhooks.md b/8base-console/custom-functions/webhooks.md
new file mode 100644
index 0000000..d9ff3bc
--- /dev/null
+++ b/8base-console/custom-functions/webhooks.md
@@ -0,0 +1,220 @@
+# Webhooks
+
+A *webhook* allows you to call *Custom Functions* as regular RESTful endpoints. They can be very useful if you integrate with a 3rd party service that posts data back to your app using a specified URL. For example, enabling a payment processing service such as Stripe or Coinbase Commerce to notify your app of a successful payment by calling *X* URL.
+
+### 8base.yml Declaration
+Webhooks have an optional parameter `path` that allows you to manually specify the final URL fragment. By default, it gets defined as the function name. 
+
+```yaml
+
+functions:
+  #
+  # Using a default path, the deployed endpoint would
+  # be available when making an POST request to:
+  #
+  # https://api.8base.com/<WORKSPACE_ID>/webhook/paymentWebhookDefaultPath
+  #
+  # Declare custom webhooks like so.
+	paymentWebhookDefaultPath:
+		handler:
+			code: src/paymentWebhook.js
+		type: webhook
+		method: POST
+  #
+  # Using a custom path, the deployed endpoint would
+  # be available when making an POST request to:
+  #
+  # https://api.8base.com/<WORKSPACE_ID>/webhook/successful-charge-notice
+  #
+  # Declare custom webhooks like so.
+	paymentWebhookCustomPath:
+		handler:
+			code: src/paymentWebhook.js
+		type: webhook
+		path: successful-charge-notice
+		method: POST
+```
+
+All webhooks require a unique name and allow for the same function to be called from different entries. This means that `functionA` and `functionB` may both specify the same function to be called, even if they have different configurations (i.e. POST vs DELETE). You are able to deploy as many webhooks as you want to a single workspace.
+
+### Webhook Arguments
+To learn about the arguments that are passed to webhooks, review the [custom function arguments docs.](./README.md#custom-function-arguments)
+
+### Path Parameters
+Webhook functions support the use of path parameters. Path parameters are parameters whose values are set dynamically in the endpoint's path segment, and can be accessed within the handler function. This makes the webhook incredibly dynamic, enabling the path to be used as a means of passing important data to the webhook function.
+
+For example, lets change the last example to include a value named `customerId` in the path. This gets declared in the project's `8base.yml`.
+
+```yaml
+...
+  paymentWebhookCustomPath:
+    handler:
+      code: src/paymentWebhook.js
+    type: webhook
+    # customerId path parameter
+    path: '{customerId}/successful-charge-notice'
+    method: POST
+```
+
+Once deployed, the updated webhook endpoint gets set to `https://api.8base.com/<WORKSPACE_ID>/webhook/{customerId}/successful-charge-notice` and allows for a `customerId` param to be accesed on the `event` argument.
+
+```javascript
+module.exports = async (event, ctx) => {
+  /* Accessing pathParameters from the event object */
+  let { customerId } = event.pathParameters;
+
+  /* Function code*/
+};
+```
+
+
+### Permissioning Webhooks
+Webhooks are public functions by default and are **not** permissioned using 8base's native authorization system. Instead, developers looking to permission access to webhook functions can do so using this suggested method - or another way that they choose to implement.
+
+##### Checking for an Environment Variable
+For systems that require a secure webhook, access tokens from authorized systems get [set as a environment variables](../../development-tools/dev-env/runtime_environment.md) in the 8base workspace. The authorized system is then able to specify their access token as a custom header, which then get validated within the webhook function.
+
+![Setting custom access tokens and Environment Variables](../../.gitbook/assets/permissons-webhook-vars-example.png)
+
+In this example, the webhook's path is `{client}/protected-webhook`. We expect the `client` path parameter to be a name (i.e. STRIPE, AUTHORIZE_NET, etc). That value is then coerced into an environment variable key, retrieved, and compared.
+
+```javascript
+module.exports = async (event, ctx) => {
+  /* Validate access using custom header */
+  let accessToken = process.env[`${event.pathParameters.client}_ACCESS_TOKEN`];
+  let headerToken = event.headers['X-CLIENT-ACCESS-TOKEN'];
+
+  if (!Boolean(accessToken) && accessToken != headerToken) {
+    return {
+      statusCode: 403,
+      body: JSON.stringify({ message: 'Unauthorized access' })
+    }
+  }
+
+  /* Function code */
+};
+```
+
+### Webhook Response
+The format of the response object is left entirely up to the developer, giving full control over the returned HTTP status code, headers and response body.
+
+*An HTTP `statusCode` value is required*
+
+```javascript
+return {
+  statusCode: 200, // statusCode is required
+  headers: {
+    "x-custom-header" : "My Header Value"
+  },
+  body: JSON.stringify({ message: "Hello World!" })
+}
+```
+{% hint style="info" %}
+##### Getting the webhook URL
+
+In order to get your webhook URL after you have deployed it, run `8base describe [FUNCTION_NAME]` using the CLI.
+{% endhint %}
+
+### Example
+
+Here is an example webhook with in-code documentation to help you get started.
+
+```javascript
+/**
+ * Import any dependencies. All deployed functions can utilize any dependency
+ * that was declared in the projects package.json file.
+ */
+import gql from 'graphql-tag';
+
+/**
+ * Custom modules can get imported (and shared between functions) 
+ * by importing/requiring them using relative paths.
+ */
+import { sendMail, GMAIL_USER } from '../../mailer';
+
+/**
+ * Inside the webhook, API calls can be executed against your 
+ * workspace and 3rd party API's.
+ */
+const INVOICE_MUTATION = gql`
+  mutation Invoice($id: ID!, $state: STRING!) {
+    invoiceUpdate(data: {
+    	id: $id
+    	state: $state
+    }) {
+      id
+      state
+      customer {
+      	name
+      	email
+      }
+    }
+  }
+`;
+
+/**
+ * Webhook response objects require a statusCode attribute to be specified.
+ * A response body can get specified as a stringified JSON object and any
+ * custom headers set.
+ */
+const responseBuilder = (code=200, message=undefined, headers={}) => ({
+  body: JSON.stringify({ message }),
+  statusCode: code,
+  headers
+})
+
+/** 
+ * The webhook function's handler can be synchronous or asynchronous and
+ * is always passed the event, and context (ctx) arguments.
+ */
+module.exports = async (event, ctx) => {
+  let response
+
+  try {
+    /**
+     * Access posted data on the event object:
+     * {
+     *   "invoiceId": <invoiceID>,
+     *   "chargeType": <chargeType>
+     * }
+     */
+    response = await ctx.api.gqlRequest(INVOICE_MUTATION, {
+    	id: event.data.invoiceId
+    	state: event.data.chargeType
+    })
+  /* Handle errors for failed GraphQL mutation */
+  } catch (e) {
+    return responseBuilder(422, "Failed to update invoice")
+  }
+
+  try {
+  	/**
+     * If the update was successful, send an email to the
+     * app user notifying them.
+     */
+    const { invoiceUpdatenv: { customer } } = response
+
+    /* Add email event to logs */
+    console.log(`Sending email to ${customer.email}...`)
+
+    /* Send email using imported module */
+    await sendMail({
+      from: GMAIL_USER,
+      to: customer.email,
+      subject: 'An update about your invoice',
+      html: `
+      	Hi ${customer.name},
+      	You're invoice was just marked ${invoiceUpdate.state}
+      	Thanks!
+      `
+    })
+
+  /* Handle error for failed email */
+  } catch (e) {
+    return responseBuilder(400, 'Failed to notify user')
+  }
+
+  /* Return final success response */
+  return responseBuilder(200, 'Success')
+};
+```
diff --git a/8base-console/graphql-api/README.md b/8base-console/graphql-api/README.md
new file mode 100644
index 0000000..a300892
--- /dev/null
+++ b/8base-console/graphql-api/README.md
@@ -0,0 +1,278 @@
+*For the sake of the following examples, let's consider a scenario where a table called `Posts` exists, having expected fields and relations like `title`, `body`, `author`, etc.*
+
+### GraphQL API and Basic Concepts
+All workspaces in 8base are assigned unique API endpoints. These endpoints handle GraphQL queries, mutations and subscriptions for every data table (covering all Create, Read, Update, Delete operations, plus some...) out-of-the-box.
+
+{% hint style="info" %}
+All API Endpoints are structured as so:
+`https://api.8base.com/<WORKSPACE_ID>`
+{% endhint %}
+
+The API comes pre-configured with filtering, pagination, full-text search and many other advanced features, putting the best tools possible for accessing data in the front-end developer's hands.
+
+*Note: Using [Custom Functions](../custom-functions/README.md), these GraphQL resources can be extended and added to in any way seen fit.*
+
+There are several way of retrieving an API endpoint for your workspace. The easiest is to login to the [8base Management Console](https://app.8base.com), select a workspace and copy the `API Endpoint` displayed on the dashboard.
+
+![Where to find a workspace API endpoint](../../.gitbook/assets/workspace-api-endpoint.png)
+
+### Understanding Fields
+Put simply, GraphQL is a specification for requesting fields on objects. Let's look at a simple 8base query example and the result it returns when run:
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+query {
+  author(name: "Huxley") {
+    name
+    createdAt
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "author": {
+      "name": "Huxley",
+      "createdAt": "2019-03-21T01:23:34.983Z"
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+We see immediately that our result has the same shape as the query. This is key to GraphQL; you always get what you ask for, and the server knows which fields the clients was asking for.
+
+8base GraphQL queries are interactive, and support relational queries natively. This mean two important things, 1) a query can be changed at any time, and 2) related data can be joined without writing complex database queries and serializers (it's handled for you). Let's try another example to demonstrate this.
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+query {
+  author(name: "Huxley") {
+    name
+    posts {
+      items {
+        id
+        title
+      }
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "author": {
+      "name": "Huxley",
+      "posts": {
+        "items": [
+          {
+            "id": "ck08eum6101qf01l9cn6v35v4",
+            "title": "Awesome Possum"
+          },
+          {
+            "id": "ck08eve7t01r701l9fsg9a4ow",
+            "title": "Pt.2 of the Possum Trilogy"
+          }
+        ]
+      }
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+In this previous example, the `createdAt` field was removed from the query and a `posts` parameter added. In the response, we see this reflected by there no longer being a `created` key and the added `posts` array containing its specified parameters - a sub-selection on fields for the related object(s).
+
+### Understanding Arguments
+The power of the 8base GraphQL API is further enriched by the ability to specify different arguments when executing a query. This has been demonstrated several times now, where "Huxley" is being passed as an argument to the query (`...author(name: "Huxley")`). When creating data tables in the **Data Builder**, any field marked as *unique* can then be used as an argument for a query.
+
+For example, were the *Posts* table to have the *Title* field set to only permit unique values, we could then query a specific *Post* record like so:
+
+```javascript
+{
+  post(title: "<POST_TITLE>") {
+    title
+    body
+  }
+}
+```
+
+### Variables
+![Using Variables in GraphQL queries](../../.gitbook/assets/api-explorer-variables-examples.png)
+
+In order to make a query re-usable, it can be made dynamic by using variables.
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+query($filter: PostFilter) {
+  postsList(filter: $filter) {
+    count
+    items {
+      title
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Variables" %}
+```json
+{
+  "filter": {
+    "title": {
+      "contains": "Possum"
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "postsList": {
+      "count": 2,
+      "items": [
+        {
+          "title": "Awesome Possum"
+        },
+        {
+          "title": "Everybody Loves Possum"
+        }
+      ]
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+
+### Aliases
+Aliases get used to return objects having different names than their field names. This is needed when fetching the same type of objects with different arguments in a single query.
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+query {
+  hux: author(name: "Huxley") {
+    name
+    posts {
+      count
+    }
+  }
+  
+  steve: author(name: "Stevens") {
+    name
+    posts {
+      count
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "hux": {
+      "name": "Huxley",
+      "posts": {
+        "count": 2
+      }
+    },
+    "steve": {
+      "name": "Stevens",
+      "posts": {
+        "count": 2
+      }
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+### Fragments
+Queries can get verbose and unorganized. Fragment create a set of fields that can then be used to represent the defined set.
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+query {
+  hux: author(name: "Huxley") { ...authorFrag }
+  steve: author(name: "Stevens") { ...authorFrag }
+}
+
+fragment authorFrag on Author {
+  name
+  posts {
+    count
+    items {
+      title
+      createdAt
+      updatedAt
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "hux": {
+      "name": "Huxley",
+      "posts": {
+        "count": 2,
+        "items": [
+          {
+            "title": "Awesome Possum",
+            "createdAt": "2019-09-04T22:11:18.493Z",
+            "updatedAt": "2019-09-04T22:20:34.650Z"
+          },
+          {
+            "title": "Abominable Snowman Found Dead in Miami Motel",
+            "createdAt": "2019-09-04T22:32:50.430Z",
+            "updatedAt": "2019-09-04T22:32:50.430Z"
+          }
+        ]
+      }
+    },
+    "steve": {
+      "name": "Stevens",
+      "posts": {
+        "count": 2,
+        "items": [
+          {
+            "title": "A Sunset and Waves",
+            "createdAt": "2019-09-04T22:22:51.846Z",
+            "updatedAt": "2019-09-04T22:22:51.846Z"
+          },
+          {
+            "title": "Everybody Loves Possum",
+            "createdAt": "2019-09-04T22:26:19.045Z",
+            "updatedAt": "2019-09-04T22:26:19.045Z"
+          }
+        ]
+      }
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
\ No newline at end of file
diff --git a/8base-console/graphql-api/error_handling.md b/8base-console/graphql-api/error_handling.md
new file mode 100644
index 0000000..287d77c
--- /dev/null
+++ b/8base-console/graphql-api/error_handling.md
@@ -0,0 +1,26 @@
+# Error Handling
+
+In order to return an error or a list of errors from a custom function you can always manually set the `errors` property of the returned object. 8base also has a convenient mechanism that allows you to use `throw`. Throwing an error is equivalent to returning the following object:
+
+* For resolvers and triggers:
+
+```javascript
+// throw new Error("Error message") =>
+return {
+  data: null,
+  errors: [{
+    message: error.message,
+    code: error.code,
+  }]
+}
+```
+
+* For webhooks:
+
+```javascript
+// throw new Error("Error message") =>
+return {
+  statusCode: 500,
+  body: error.message
+}
+```
\ No newline at end of file
diff --git a/8base-console/graphql-api/mutations/README.md b/8base-console/graphql-api/mutations/README.md
new file mode 100644
index 0000000..8cdb3c0
--- /dev/null
+++ b/8base-console/graphql-api/mutations/README.md
@@ -0,0 +1,32 @@
+*For the sake of the any examples, let's consider a scenario where a table called Posts exists, having expected fields and relations like title, body, author, etc.*
+
+### GraphQL Mutations
+GraphQL mutations are used to create, update, and delete data via the workspace API.
+
+8base's GraphQL engine auto-generates mutations as part of the GraphQL schema based on your workspace tables. All workspace tables can recieve mutations through the workspace endpoint.
+
+### Auto-generated mutations
+Whenever a table is added to a work space, four GraphQL mutation operations are auto-generated for the table. They are:
+
+* `tableNameCreate(...)` - Accepts `data` as an argument from which it will populate a new record in the database table.
+
+* `tableNameCreateMany(...)` - Accepts `data` as an argument from which it will populate one or more new records in the database table.
+
+* `tableNameUpdate(...)` - Accepts `data` and `filter` as arguments with which it will update an existing record.
+
+* `tableNameDelete(...)` - Accepts `data`, `filter`, and `force` as arguments with which it will delete an existing record - and dependent records when specified.
+
+### Relationships
+A cool feature of 8base API is the ability to create related objects while creating or updating parent objects. The following operations on relationships are supported:
+
+* **Create**: Create and relate child objects.
+* **Connect**: Connect existing objects in addition to already connected objects.
+* **Reconnect**: Replace old connected objects with a new set of connected objects (update mutation only).
+* **Disconnect**: Disconnect connected object(s) (update mutation only).
+
+### Arguments
+8base accepts to the following mutation arguments, depending on the operation.
+
+* **data**. Data used to update or locate the record.
+* **filter**. A filter containing a unique field value for locating the record.
+* **force**. Deletes all child records having a mandatory association to the record being deleted. Defaults to `false`.
diff --git a/8base-console/graphql-api/mutations/related-record-mutations.md b/8base-console/graphql-api/mutations/related-record-mutations.md
new file mode 100644
index 0000000..9a841ef
--- /dev/null
+++ b/8base-console/graphql-api/mutations/related-record-mutations.md
@@ -0,0 +1,212 @@
+*For the sake of the following examples, let's consider a scenario where a table called `Posts` exists, having expected fields and relations like `title`, `body`, `author`, etc.*
+
+### Mutating related records
+You can create, connect, reconnect, and disconnect related table records using 8base's auto-generated GraphQL mutation operations.
+
+* **Create**: Create and relate child objects.
+* **Connect**: Connect existing objects in addition to already connected objects.
+* **Reconnect**: Replace old connected objects with a new set of connected objects (update mutation only).
+* **Disconnect**: Disconnect connected object(s) (update mutation only).
+
+***Note**: Some examples will use [aliases](../README.md) to show side by side the use of `data.id` versus `filter`. All examples work without aliases.*
+
+##### Creating related records in nested mutation
+Whether when creating or updating a parent record, one or more child records can be created using `create`.
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+/**
+ * The author record's bio is gets updated while 
+ * a new Post is being created and associated.
+ */
+mutation {
+  authorUpdate(filter: {
+    name: "Huxley"
+  },
+  data: {
+    bio: "Just a guy who loves possum.",
+    posts: {
+      create: [{
+        title: "Can't stop the Possum",
+        body: "Cause Possum is Awesome",
+        publishingDate: "2019-09-22T03:45:33.432Z"
+      }]
+    }
+  }) {
+    posts(last: 1) {
+      items {
+        title
+      }
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "authorUpdate": {
+      "posts": {
+        "items": [
+          {
+            "title": "Can't stop the Possum"
+          }
+        ]
+      }
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+##### Connecting records in mutation
+One or more records can be connected using a mutation that associates them - whether the relationship is *many-to-many*, *one-to-many*, or *one-to-one*.
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+/**
+ * The author gets changed to the author 
+ * named "Stevens" using connect.
+ */
+mutation {
+  postUpdate(filter: {
+    title: "Can't stop the Possum"
+  },
+  data: {
+    author: {
+      connect: {
+        name: "Stevens"
+      }
+    }
+  }) {
+    title
+    author {
+      name
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "postUpdate": {
+      "title": "Can't stop the Possum",
+      "author": {
+        "name": "Stevens"
+      }
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+##### Re-connecting records in mutation
+All related records can be *dissasociated* from a record, while *connecting* one or more in a specified set.
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+/**
+ * All posts belonging to the author Huxley are changed to the new set.
+ */
+mutation {
+  authorUpdate(filter: {
+    name: "Huxley"
+  },
+  data: {
+    posts: {
+      reconnect: [{
+        id: "ck08eum6101qf01l9cn6v35v4"
+      }, {
+        id: "ck08eve7t01r701l9fsg9a4ow"
+      }]
+    }
+  }) {
+    name
+    posts {
+      count
+      items {
+        title
+      }
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "authorUpdate": {
+      "name": "Huxley",
+      "posts": {
+        "count": 2,
+        "items": [
+          {
+            "title": "Awesome Possum"
+          },
+          {
+            "title": "Pt.2 of the Possum Trilogy"
+          }
+        ]
+      }
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+##### Disconnecting records in mutation
+One or more records can be disconnected using a mutation - whether the relationship is *many-to-many*, *one-to-many*, or *one-to-one*. If the relationship is *mandatory*, an error will be raised.
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+/**
+ * All posts belonging to the author 
+ * Huxley are changed to the new set.
+ */
+mutation {
+  authorUpdate(filter: {
+    name: "Huxley"
+  },
+  data: {
+    publications: {
+      disconnect: [{
+        id: "ck0d2peue00sg01l36w2q2gdo"
+      }, {
+        id: "ck0d2q07g00sx01l340mt7lh9"
+      }]
+    }
+  }) {
+    name
+    publications {
+      count
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "authorUpdate": {
+      "name": "Huxley",
+      "publications": {
+        "count": 0
+      }
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
diff --git a/8base-console/graphql-api/mutations/single-record-mutations.md b/8base-console/graphql-api/mutations/single-record-mutations.md
new file mode 100644
index 0000000..990a5ad
--- /dev/null
+++ b/8base-console/graphql-api/mutations/single-record-mutations.md
@@ -0,0 +1,127 @@
+*For the sake of the following examples, let's consider a scenario where a table called `Posts` exists, having expected fields and relations like `title`, `body`, `author`, etc.*
+
+### Mutating individual records
+You can create, update, and delete individual table records using 8base's auto-generated GraphQL mutation operations.
+
+***Note**: Some examples will use [aliases](../README.md) to show side by side the use of `data.id` versus `filter`. All examples work without aliases.*
+
+##### Creating a single record
+Create a new record using the data argument that define the records data. 
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+mutation {
+  authorCreate(data: {
+    name: "Wyatt"
+  }) {
+    id
+    name
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "authorCreate": {
+      "id": "ck0d12w8e01c001l1dtxz5b7f",
+      "name": "Wyatt"
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+##### Updating a single record
+Update a record using the data argument while including the records `id` OR using a `filter` that includes a unqiue field.
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+mutation {
+  /* Updates record name with find by unqiue name) */
+  quade: authorUpdate(filter: {
+    name: "Quade"
+  },
+  data: {
+    name: "PenPossum"
+  }) {
+    id
+    name
+  }
+  
+  /* Updates record with (find by id) */
+  wyatt: authorUpdate(data: {
+    id: "ck0d12w8e01c001l1dtxz5b7f",
+    name: "Hyatt"
+  }) {
+    id
+    name
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "quade": {
+      "id": "ck0d12nf001bu01l15skw13pg",
+      "name": "PenPossum"
+    },
+    "wyatt": {
+      "id": "ck0d12w8e01c001l1dtxz5b7f",
+      "name": "Hyatt"
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+##### Delete a single record
+Delete a record using the data argument while including the records `id` OR using a `filter` that includes a unqiue field.
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+mutation {
+  /* Deletes record by unqiue field. */
+  quade: authorDelete(filter: {
+    name: "PenPossum"
+  }) {
+    success
+  }
+  
+  /* Deletes record by id. */
+  wyatt: authorDelete(data: {
+    id: "ck0d12w8e01c001l1dtxz5b7f",
+  }) {
+    success
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "quade": {
+      "success": true
+    },
+    "wyatt": {
+      "success": true
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+When handling delete mutations, an additional force parameter can be specified in the data object that accepts a Boolean value - the default value is `false`. When set to `true` it will force a cascading delete on the record. This means that if the record being deleted is a parent in a mandatory relationship with child records, all child records will be deleted as well.
\ No newline at end of file
diff --git a/8base-console/graphql-api/queries/README.md b/8base-console/graphql-api/queries/README.md
new file mode 100644
index 0000000..5fb6b5e
--- /dev/null
+++ b/8base-console/graphql-api/queries/README.md
@@ -0,0 +1,23 @@
+### GraphQL Queries
+GraphQL queries are used to fetch data via the workspace API.
+
+8base's GraphQL engine auto-generates queries as part of the GraphQL schema based on your workspace tables. All workspace tables can be queried through the workspace endpoint.
+
+### Auto-generated queries
+Whenever a table is added to a work space, two GraphQL query operations are auto-generated for the table. They are:
+
+* `tableName(...)` - Accepts `id` and any *unique* value as an argument to retreive a single record from the database.
+
+* `tableNameList(...)` - Accepts *filter*, *sort*, *skip*, *after*, *before*, *first* and, *last* to retrive a list of curated records while supporting pagination, relational-filtering, sorting, and more.
+
+##### List Arguments
+8base responds to the following query arguments when specified for *lists*.
+
+* **filter**. Filters records based on field values.
+* **orderBy**. [DEPRECIATING - Use *sort*]
+* **sort**. Sort order configuration. Can be single- or multi- field sorting.
+* **first**. Limit query to first N records. Default and maximum value is 5000.
+* **skip**. Skip N records from the result.
+* **last**. Return N last records from the result.
+* **after**. Return records after specified ID. Used for cursor-based pagination.
+* **before**. Return records before specified ID. Used for cursor-based pagination.
diff --git a/8base-console/graphql-api/queries/aggregation-query.md b/8base-console/graphql-api/queries/aggregation-query.md
new file mode 100644
index 0000000..bc0b0a6
--- /dev/null
+++ b/8base-console/graphql-api/queries/aggregation-query.md
@@ -0,0 +1,41 @@
+*For the sake of the following examples, let's consider a scenario where a table called `Posts` exists, having expected fields and relations like `title`, `body`, `author`, etc.*
+
+### Using aggregators in queries
+You can fetch aggregations on nodes using an aggregation query. Currently the available aggregation function is `count`. 
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+query {
+  author(name: "Huxley") {
+    name
+    posts {
+      count
+      items {
+        title
+      }
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "author": {
+      "name": "Huxley",
+      "posts": {
+        "count": 2,
+        "items": [
+          { "title": "10 things you never knew about Possums" },
+          { "title": "3 things you never wanted to know about Possums" }
+        ]
+      }
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
diff --git a/8base-console/graphql-api/queries/combining-arguments.md b/8base-console/graphql-api/queries/combining-arguments.md
new file mode 100644
index 0000000..edf4a05
--- /dev/null
+++ b/8base-console/graphql-api/queries/combining-arguments.md
@@ -0,0 +1,58 @@
+*For the sake of the following examples, let's consider a scenario where a table called `Posts` exists, having expected fields and relations like `title`, `body`, `author`, etc.*
+
+### Using multiple arguments in queries
+More than one argument can get used in a single list query.
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+query {
+  postsList(filter: {
+    title: {
+      contains: "Possum"
+    }
+  },
+  sort: {
+    title: ASC
+  },
+  first: 2,
+  skip: 0
+  ) {
+    items {
+      title
+      createdAt
+      author {
+        name
+      }
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "postsList": {
+      "items": [
+        {
+          "title": "Awesome Possum",
+          "createdAt": "2019-09-04T22:11:18.493Z",
+          "author": {
+            "name": "Huxley"
+          }
+        },
+        {
+          "title": "Everybody Loves Possum",
+          "createdAt": "2019-09-04T22:26:19.045Z",
+          "author": {
+            "name": "Stevens"
+          }
+        }
+      ]
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
diff --git a/8base-console/graphql-api/queries/combining-queries.md b/8base-console/graphql-api/queries/combining-queries.md
new file mode 100644
index 0000000..5059f43
--- /dev/null
+++ b/8base-console/graphql-api/queries/combining-queries.md
@@ -0,0 +1,93 @@
+*For the sake of the following examples, let's consider a scenario where a table called `Posts` exists, having expected fields and relations like `title`, `body`, `author`, etc.*
+
+### Using multiple queries in a request
+
+If multiple queries are combined into a single request, they get executed in parallel, the responses are collated and returned as a single response object. This lets you fetch objects of different and unrelated types in the same query.
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+query {
+  /* A profile about the author */
+  author(name: "Huxley") {
+    posts {
+      count
+      items {
+        title
+      }
+    }
+  }
+  
+  /* A list of posts from other authors */
+  postsList(filter: {
+    author: {
+      name: {
+        not_equals: "Huxley"
+      }
+    }
+  }) {
+    items {
+      title
+    }
+  }
+  
+  /* A list of others other than the huxley */
+  authorsList(filter: {
+    name: {
+      not_equals: "Huxley"
+    }
+  }) {
+    count
+    items {
+      name
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "author": {
+      "posts": {
+        "count": 2,
+        "items": [
+          {
+            "title": "Awesome Possum"
+          },
+          {
+            "title": "Abominable Snowman Found Dead in Miami Motel"
+          }
+        ]
+      }
+    },
+    "postsList": {
+      "items": [
+        {
+          "title": "A Sunset and Waves"
+        },
+        {
+          "title": "Vapor Distilled Water for All"
+        },
+        {
+          "title": "Everybody Loves Possum"
+        }
+      ]
+    },
+    "authorsList": {
+      "count": 2,
+      "items": [
+        {
+          "name": "Stevens"
+        },
+        {
+          "name": "Vanderwall"
+        }
+      ]
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
diff --git a/8base-console/graphql-api/queries/filtered-list-query.md b/8base-console/graphql-api/queries/filtered-list-query.md
new file mode 100644
index 0000000..4634f45
--- /dev/null
+++ b/8base-console/graphql-api/queries/filtered-list-query.md
@@ -0,0 +1,364 @@
+*For the sake of the following examples, let's consider a scenario where a table called `Posts` exists, having expected fields and relations like `title`, `body`, `author`, etc.*
+
+### Using filters in queries
+Query list of records that are filtered. Notice the `filter` argument.
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+query {
+  postsList(filter: {
+    title: {
+      contains: "Possum"
+    },
+    createdAt: {
+      gt: "2019-09-01T00:00:00.000Z"
+    }
+  }) {
+    items {
+      title
+      body
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "postsList": {
+      "items": [
+        {
+          "title": "Awesome Possum",
+          "body": "This post is awesome, like a possum!"
+        },
+        {
+          "title": "Everybody Loves Possum",
+          "body": "Seriously, there is nothing like a sweet and cuddly possum."
+        }
+      ]
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+### Conditional Filters
+Conditional filters utilize the `AND` and `OR` keys. 
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+query {
+  postsList(filter: {
+    title: {
+      contains: "Possum"
+    },
+    createdAt: {
+      gt: "2019-09-01T00:00:00.000Z"
+    }
+  }) {
+    items {
+      title
+      body
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% code-tabs-item title="Result" %}
+```javascript
+{
+  "data": {
+    "postsList": {
+      "items": [
+        {
+          "title": "Awesome Possum",
+          "body": "This post is awesome, like a possum!"
+        },
+        {
+          "title": "Everybody Loves Possum",
+          "body": "Seriously, there is nothing like a sweet and cuddly possum."
+        }
+      ]
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+##### Using `AND`
+When `AND` is specified, all filter objects must return *truthy*. 
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+query {
+  postsList(filter: {
+    /* 1 to N filters can be specified */
+    AND: [
+      {
+        title: {
+          contains: "Possum"
+        }
+      },
+      {
+        author: {
+          name: {
+            not_equals: "Huxley"
+          }
+        }
+      }
+    ]
+  }) {
+    items {
+      title
+      author {
+        name
+      }
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "postsList": {
+      "items": [
+        {
+          "title": "Everybody Loves Possum",
+          "author": {
+            "name": "Stevens"
+          }
+        }
+      ]
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+##### Using `OR`
+When `OR` is specified, at least one filter object must return *truthy*. 
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+query {
+  postsList(filter: {
+    OR: [
+      {
+        title: {
+          contains: "Possum"
+        }
+      },
+      {
+        author: {
+          name: {
+            not_equals: "Huxley"
+          }
+        }
+      }
+    ]
+  }) {
+    items {
+      title
+      author {
+        name
+      }
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "postsList": {
+      "items": [
+        {
+          "title": "Awesome Possum",
+          "author": {
+            "name": "Huxley"
+          }
+        },
+        {
+          "title": "A Sunset and Waves",
+          "author": {
+            "name": "Stevens"
+          }
+        },
+        {
+          "title": "Everybody Loves Possum",
+          "author": {
+            "name": "Stevens"
+          }
+        }
+      ]
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+### Nested Filters
+Filters, and all their elements, can be nested to satisfy more complex specs.
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+query {
+  postsList(filter: {
+    OR: [
+      {
+        title: {
+          contains: "Possum"
+        }
+      },
+      {
+        author: {
+          name: {
+            not_equals: "Huxley"
+          }
+        }
+        AND: [
+          {
+            title: {
+              starts_with: "Vapor"
+            },
+            author: {
+              name: {
+                starts_with: "Vander"
+              }
+            }
+          },
+          {
+            createdAt: {
+              gt: "2019-09-01T00:00:00.000Z"
+            }
+          }
+        ]
+      }
+    ]
+  }) {
+    items {
+      title
+      createdAt
+      author {
+        name
+      }
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "postsList": {
+      "items": [
+        {
+          "title": "Awesome Possum",
+          "createdAt": "2019-09-04T22:11:18.493Z",
+          "author": {
+            "name": "Huxley"
+          }
+        },
+        {
+          "title": "Vapor Distilled Water for All",
+          "createdAt": "2019-09-04T22:23:22.710Z",
+          "author": {
+            "name": "Vanderwall"
+          }
+        },
+        {
+          "title": "Everybody Loves Possum",
+          "createdAt": "2019-09-04T22:26:19.045Z",
+          "author": {
+            "name": "Stevens"
+          }
+        }
+      ]
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+### Filter Types
+Depending on a field type, different filter predicates are available. 
+
+##### ID
+When filtering by a field of type ID, the available predicates are:
+* equals: ID
+* not_equals: ID
+* in: [ID!]
+* not_in: [ID!]
+* contains: ID
+* not_contains: ID
+* starts_with: ID
+* not_starts_with: ID
+* ends_with: ID
+* not_ends_with: ID
+* lt: ID (less than)
+* lte: ID (less than or equal to)
+* gt: ID (greater than)
+* gte: ID (greater that or equal to)
+* is_empty: Boolean
+* is_not_empty: Boolean
+
+##### Text/String
+When filtering by a field of type String/Text, the available predicates are:
+* equals: String
+* not_equals: String
+* in: [String!]
+* not_in: [String!]
+* contains: String
+* not_contains: String
+* starts_with: String
+* not_starts_with: String
+* ends_with: String
+* not_ends_with: String
+* is_empty: Boolean
+* is_not_empty: Boolean
+
+##### Number/Integer
+When filtering by a field of type Number/Integer, the available predicates are:
+* equals: Int
+* not_equals: Int
+* in: [Int!]
+* not_in: [Int!]
+* lt: ID (less than)
+* lte: ID (less than or equal to)
+* gt: ID (greater than)
+* gte: ID (greater that or equal to)
+* is_empty: Boolean
+* is_not_empty: Boolean
+
+##### Switch/Boolean
+When filtering by a field of type Switch/Boolean, the available predicates are:
+* equals: Boolean
+* not_equals: Boolean
+* is_empty: Boolean
+* is_not_empty: Boolean
+
+##### Table
+When filtering by a relation, the available predicates are:
+* some: [tableName]Filter
+* every: [tableName]Filter
+* none: [tableName]Filter
+
+##### Users Table
+The *Users* has two special conditional filters that can get used. They are referential to a user record and the logged in user. For example, was a *Post.createdBy* the logged in user?
+* is_self: Boolean
+* not_self: Boolean
diff --git a/8base-console/graphql-api/queries/paginated-query-results.md b/8base-console/graphql-api/queries/paginated-query-results.md
new file mode 100644
index 0000000..8919026
--- /dev/null
+++ b/8base-console/graphql-api/queries/paginated-query-results.md
@@ -0,0 +1,47 @@
+*For the sake of the following examples, let's consider a scenario where a table called `Posts` exists, having expected fields and relations like `title`, `body`, `author`, etc.*
+
+### Using pagination in queries
+The arguments `skip` and `first` get used for pagination.
+
+`first` specifies the number of rows to pass from the result set and `skip` determines which slice to retain from the results.
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+query {
+  /**
+   * First consider 0 as the starting slice of paginated rcords. As this
+   * number is increased, the prior results leave out previously fetched
+   * records. (i.e., skip 0 -> skip 3 -> skip 6 -> skip 9...)
+   */
+  postsList(skip: 0, first: 3) {
+    items {
+      title
+    }
+  }
+}
+
+```
+{% endcode-tabs-item %}
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "postsList": {
+      "items": [
+        {
+          "title": "Awesome Possum"
+        },
+        {
+          "title": "A Sunset and Waves"
+        },
+        {
+          "title": "Vapor Distilled Water for All"
+        }
+      ]
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
diff --git a/8base-console/graphql-api/queries/record-list-query.md b/8base-console/graphql-api/queries/record-list-query.md
new file mode 100644
index 0000000..2915d03
--- /dev/null
+++ b/8base-console/graphql-api/queries/record-list-query.md
@@ -0,0 +1,46 @@
+*For the sake of the following examples, let's consider a scenario where a table called `Posts` exists, having expected fields and relations like `title`, `body`, `author`, etc.*
+
+### Fetching multiple table records
+Query list of records from a single table. Note the `items` key that denotes an array of results will get returned.
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+query {
+  postsList {
+    count
+    items {
+      title
+      body
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "postsList": {
+      "count": 3,
+      "items": [
+        {
+          "title": "Awesome Possum",
+          "body": "This post is awesome, like a possum!"
+        },
+        {
+          "title": "A Sunset and Waves",
+          "body": "There was once a beautiful sunset, and waves."
+        },
+        {
+          "title": "Vapor Distilled Water for All",
+          "body": "Everyone can have vapor distilled water."
+        }
+      ]
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
diff --git a/8base-console/graphql-api/queries/related-record-query.md b/8base-console/graphql-api/queries/related-record-query.md
new file mode 100644
index 0000000..7d68528
--- /dev/null
+++ b/8base-console/graphql-api/queries/related-record-query.md
@@ -0,0 +1,40 @@
+*For the sake of the following examples, let's consider a scenario where a table called `Posts` exists, having expected fields and relations like `title`, `body`, `author`, etc.*
+
+### Fetching related table records
+Query a single record and return data from related tables in the response.
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+query {
+  post(title: "Awesome Possum") {
+    title
+    author {
+      name
+      avatar {
+        downloadUrl
+      }
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "post": {
+      "title": "Awesome Possum",
+      "author": {
+        "name": "Huxley",
+        "avatar": {
+          "downloadUrl": "https://linktomy.downloadUrl/forA/amazingAvatar.jpg"
+        }
+      }
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
\ No newline at end of file
diff --git a/8base-console/graphql-api/queries/single-record-query.md b/8base-console/graphql-api/queries/single-record-query.md
new file mode 100644
index 0000000..90dc1bd
--- /dev/null
+++ b/8base-console/graphql-api/queries/single-record-query.md
@@ -0,0 +1,61 @@
+*For the sake of the following examples, let's consider a scenario where a table called `Posts` exists, having expected fields and relations like `title`, `body`, `author`, etc.*
+
+### Fetching specific table records
+You can fetch a single record using the record's `id`.
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+query {
+  post(id: "<POST_ID>") {
+    id
+    title
+    body
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "post": {
+      "id": "<POST_ID>",
+      "title": "Awesome Possum",
+      "body": "This post is awesome, like a possum!"
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+### Single record queries using unique fields
+You can fetch a single record using a unique field other than `id`. This field must be specified as *No Duplicate Values* in the table's field definition.
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+query {
+  post(title: "Awesome Possum") {
+    title
+    body
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "post": {
+      "title": "Awesome Possum",
+      "body": "This post is awesome, like a possum!"
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
diff --git a/8base-console/graphql-api/queries/sort-list-query.md b/8base-console/graphql-api/queries/sort-list-query.md
new file mode 100644
index 0000000..225deba
--- /dev/null
+++ b/8base-console/graphql-api/queries/sort-list-query.md
@@ -0,0 +1,136 @@
+*For the sake of the following examples, let's consider a scenario where a table called `Posts` exists, having expected fields and relations like `title`, `body`, `author`, etc.*
+
+### Using sorting in queries
+
+Results from your query can be sorted by using the `sort` argument. The sort order (ascending vs. descending) gets set by specifying ASC or DESC for the field name.
+
+Sorting a list of queried records.
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+query {
+  postsList(sort: {
+    createdAt: ASC
+  }) {
+    items {
+      createdAt
+      title
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "postsList": {
+      "items": [
+        {
+          "createdAt": "2019-09-04T22:11:18.493Z",
+          "title": "Awesome Possum"
+        },
+        {
+          "createdAt": "2019-09-04T22:22:51.846Z",
+          "title": "A Sunset and Waves"
+        },
+        {
+          "createdAt": "2019-09-04T22:23:22.710Z",
+          "title": "Vapor Distilled Water for All"
+        },
+        {
+          "createdAt": "2019-09-04T22:26:19.045Z",
+          "title": "Everybody Loves Possum"
+        },
+        {
+          "createdAt": "2019-09-04T22:32:50.430Z",
+          "title": "Abominable Snowman Found Dead in Miami Motel"
+        }
+      ]
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+### Nested/multi-field sorting
+
+Results from your query can be sorted by attributes on related tables, as well as using multiple sort objects. They're ranked in priority by the order they're recieved in.
+
+{% code-tabs %}
+{% code-tabs-item title="Query" %}
+```javascript
+query {
+  postsList(sort: [
+    {
+      author: {
+        name: DESC
+      }
+    }, 
+    {
+      title: ASC
+    }
+  ]) {
+    items {
+      title
+      createdAt
+      author {
+        name
+      }
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "postsList": {
+      "items": [
+        {
+          "title": "Vapor Distilled Water for All",
+          "createdAt": "2019-09-04T22:23:22.710Z",
+          "author": {
+            "name": "Vanderwall"
+          }
+        },
+        {
+          "title": "A Sunset and Waves",
+          "createdAt": "2019-09-04T22:22:51.846Z",
+          "author": {
+            "name": "Stevens"
+          }
+        },
+        {
+          "title": "Everybody Loves Possum",
+          "createdAt": "2019-09-04T22:26:19.045Z",
+          "author": {
+            "name": "Stevens"
+          }
+        },
+        {
+          "title": "Abominable Snowman Found Dead in Miami Motel",
+          "createdAt": "2019-09-04T22:32:50.430Z",
+          "author": {
+            "name": "Huxley"
+          }
+        },
+        {
+          "title": "Awesome Possum",
+          "createdAt": "2019-09-04T22:11:18.493Z",
+          "author": {
+            "name": "Huxley"
+          }
+        }
+      ]
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
diff --git a/8base-console/graphql-api/subscriptions.md b/8base-console/graphql-api/subscriptions.md
new file mode 100644
index 0000000..d66d866
--- /dev/null
+++ b/8base-console/graphql-api/subscriptions.md
@@ -0,0 +1,44 @@
+# Subscriptions
+
+Subscriptions let your client-side application receive server-side events from the 8base platform. This is useful when you are building real-time functionality such as chats or notifications. Subscriptions are automatically generated for every data table you create.
+
+Apollo Client provides a standard way to use subscriptions, but some additional configuration needs to be implemented in order to connect to the Websocket endpoint. However, if you are using [EightBaseAppProvider](https://github.com/8base/sdk/tree/master/packages/app-provider) from 8base open-source SDK it does all the configuration for you and you can start using subscriptions out of the box. 
+
+
+```javascript
+import gql from 'graphql-tag';
+import { Subscription } from 'react-apollo';
+
+const CHAT_MESSAGE_SUBSCRIPTION = gql`
+  subscription onChatMessageAdded($chatId: String!) {
+    ChatMessage(filter: {
+      mutation_in: [create],
+      node: {
+        chatId: {
+          equals: $chatId
+        }
+      }
+    }) {
+      node {
+        createdAt
+        createdBy {
+          firstName
+          lastName
+        }
+        text
+      }
+    }
+  }
+`;
+
+const NewChatMessage = ({ chatId }) => (
+  <Subscription
+    subscription={CHAT_MESSAGE_SUBSCRIPTION}
+    variables={{ chatId }}
+  >
+    {({ data: { ChatMessage }, loading }) => (
+      <div>New message: {!loading && ChatMessage.text}</div>
+    )}
+  </Subscription>
+);
+```
\ No newline at end of file
diff --git a/8base-console/graphql-api/subscriptions/README.md b/8base-console/graphql-api/subscriptions/README.md
new file mode 100644
index 0000000..2011489
--- /dev/null
+++ b/8base-console/graphql-api/subscriptions/README.md
@@ -0,0 +1,23 @@
+*For the sake of the any examples, let's consider a scenario where a table called Posts exists, having expected fields and relations like title, body, author, etc.*
+
+### GraphQL Subscriptions
+A GraphQL subscription is a web-socket connection where the client receives an event with data whenever the observed event occures upstream.
+
+8base's GraphQL engine auto-generates subscriptions as part of the GraphQL schema based on your workspace tables. All workspace tables can recieve subscriptions through the workspace endpoint using `wss` protocol.
+
+### Auto-generated subscriptions
+Whenever a table is added to a work space, a GraphQL subscriptions operation is auto-generated for the table.
+
+* `TableName(...)` - Accepts `filter` as an argument with which it will listen for specified mutation events on one or more scoped records.
+
+### Arguments
+8base accepts to the following subscription argument.
+
+* **filter**. A `SubscriptionFilter` type filter containing values for mutation types, table filter, and updated fields filter.
+
+### SubscriptionFilter type
+The `SubscriptionFilter` type is different from filters used in GraphQL queries. Instead, the `SubscriptionFilter` contains 3-top level keys:
+
+* **mutation_in**: An array of mutation events on which to listen (create, update, delete).
+* **node**: Normal query filter that allows for scoping of one or more records.
+* **updatedFields**: For specifying which individual fields to observe. 
diff --git a/8base-console/graphql-api/subscriptions/complex-record-subscriptions.md b/8base-console/graphql-api/subscriptions/complex-record-subscriptions.md
new file mode 100644
index 0000000..d8f134e
--- /dev/null
+++ b/8base-console/graphql-api/subscriptions/complex-record-subscriptions.md
@@ -0,0 +1,159 @@
+*For the sake of the following examples, let's consider a scenario where a table called `Posts` exists, having expected fields and relations like `title`, `body`, `author`, etc.*
+
+### Subscribing to single and related records using filters
+You can subscribe to individual and related records being created, updated, and deleted using 8base's auto-generated GraphQL subscriptiong operation.
+
+##### Subscribing to all mutations on a single record
+Subscription for observing a single record. Note that a subscription could listen for an individual record being `created` by specifying a unique field that the record will be created with, **only** if the subscription is established prior to the record being created.
+
+{% code-tabs %}
+{% code-tabs-item title="Subscription" %}
+```javascript
+subscription {
+  Posts(filter: {
+    mutation_in: [
+      create, 
+      update, 
+      delete
+    ],
+    node: {
+      title: {
+        equals: "Possumly the Best Coffee"
+      }
+    } 
+  }) {
+    node {
+      title
+      body
+      publishingDate
+      authors {
+        name
+      }
+    }
+    updatedFields
+    mutation
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "Posts": {
+      "node": {
+        "title": "Possumly the Best Coffee",
+        "body": "This coffee is Possumly the best in all of the forrest!",
+        "publishingDate": "2020-01-18",
+        "authors": {
+          "name": "Huxley"
+        }
+      },
+      "updatedFields": [
+        "title",
+        "body",
+        "publishingDate",
+        "authors"
+      ],
+      "mutation": "update"
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+##### Subscribing to all records related to a record
+Subscription for observing a single record. Note that a subscription could listen for an individual record being `created` by specifying a unique field that the record will be created with, **only** if the subscription is established prior to the record being created.
+
+{% code-tabs %}
+{% code-tabs-item title="Subscription" %}
+```javascript
+subscription {
+  Posts(filter: {
+    mutation_in: [
+      create, 
+      update, 
+      delete
+    ],
+    node: {
+      authors: {
+        name: {
+          equals: "Huxley"
+        }
+      }
+    } 
+  }) {
+    node {
+      title
+      body
+      publishingDate
+    }
+    mutation
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "Posts": {
+      "node": {
+        "title": "It's a Hard Knock Life, for Possums",
+        "body": "It is.",
+        "publishingDate": "2020-01-18"
+      },
+      "mutation": "create"
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+##### Subscription to field specific events on records
+Subscription for listening to field change on table records.
+
+{% code-tabs %}
+{% code-tabs-item title="Subscription" %}
+```javascript
+subscription {
+  Posts(filter: {
+    mutation_in: [update],
+    updatedFields: {
+      contains: ["title"]
+    }
+  }) {
+    node {
+      title
+    }
+    previousValues {
+      title
+    }
+    mutation
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "Posts": {
+      "node": {
+        "title": "You're the Coolest Possum"
+      },
+      "previousValues": {
+        "title": "You're Possumly the Coolest"
+      },
+      "mutation": "update"
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
diff --git a/8base-console/graphql-api/subscriptions/simple-record-subscriptions.md b/8base-console/graphql-api/subscriptions/simple-record-subscriptions.md
new file mode 100644
index 0000000..66e243f
--- /dev/null
+++ b/8base-console/graphql-api/subscriptions/simple-record-subscriptions.md
@@ -0,0 +1,124 @@
+*For the sake of the following examples, let's consider a scenario where a table called `Posts` exists, having expected fields and relations like `title`, `body`, `author`, etc.*
+
+### Subscribing to records
+You can subscribe to records being created, updated, and deleted using 8base's auto-generated GraphQL subscriptiong operation.
+
+##### Create subscription
+Subscription for listening to table records being created.
+
+{% code-tabs %}
+{% code-tabs-item title="Subscription" %}
+```javascript
+subscription {
+  Posts(filter: {
+    mutation_in: [create]
+  }) {
+    node {
+      title
+      publishingDate
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "Posts": {
+      "node": {
+        "title": "Nothing is Im-possumble",
+        "publishingDate": "2020-01-18"
+      }
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+##### Update subscription
+Subscription for listening to table records being updated.
+
+{% code-tabs %}
+{% code-tabs-item title="Subscription" %}
+```javascript
+subscription {
+  Posts(filter: {
+    mutation_in: [update]
+  }) {
+    node {
+      title
+      body
+      publishingDate
+      updatedAt
+    }
+    previousValues {
+      title
+      body
+    }
+    updatedFields
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "Posts": {
+      "node": {
+        "title": "Nothing is ever Im-possumble",
+        "body": "Never let anyone tell you that something you want in life is impossumble.",
+        "publishingDate": "2020-01-18",
+        "updatedAt": "2019-10-01T17:50:18.621Z"
+      },
+      "previousValues": {
+        "title": "Nothing is Im-possumble",
+        "body": "Never let anyone tell you that something is impossumble."
+      },
+      "updatedFields": [
+        "title",
+        "body"
+      ]
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+##### Delete subscription
+Subscription for listening to table records being deleted.
+
+{% code-tabs %}
+{% code-tabs-item title="Subscription" %}
+```javascript
+subscription {
+  Posts(filter: {
+    mutation_in: [delete]
+  }) {
+    node {
+      title
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Result" %}
+```json
+{
+  "data": {
+    "Posts": {
+      "node": {
+        "title": "10 Types of Fruit Possums Love"
+      }
+    }
+  }
+}
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
diff --git a/8base-console/graphql-api/variables.md b/8base-console/graphql-api/variables.md
new file mode 100644
index 0000000..1b5023b
--- /dev/null
+++ b/8base-console/graphql-api/variables.md
@@ -0,0 +1,90 @@
+# Variables Definitions
+
+To avoid hardcoding all values when working with GraphQL, the **API Explorer** provides a *Variables* section in which a JSON object can be added. The top level keys of the JSON object are made available as variables that have names denoted by a dollar-sign ($KEY_NAME). This allows for a much more enjoyable development experience when writing and testing dynamic queries, mutations, and subscriptions.
+
+![Declaring variables in the API Explorer](../../.gitbook/assets/api-explorer-query-variables.png)
+
+### Declaring Variables
+
+Some dynamic inputs might need to be added when you submit a request to your GraphQL server, while keeping the operation document remains the same. These are your operation's variables. Variables must be typed arguments that get declared on the GraphQL operation. Because GraphQL is typed statically, whether you're passing in the correct variables can be validated for you.
+
+The following two examples would work together for querying a list of female users over the age of 45.
+
+##### JSON Variable
+```json
+{
+	"age": 45,
+	"gender": "female"
+}
+```
+
+##### Query
+```js
+query ($gender: String, $age: Int) {
+	usersList(filter: {
+    gender: {
+      equals: $gender
+    },
+    age: {
+    	gt: $age
+    }
+
+  }) {
+    items {
+    	id
+      name
+    }
+  }
+}
+```
+
+You can see that the keys here match the variable names specified in the variables definition. These variable names denoted with the *$* are what get used in the selecton set.
+
+### Declaring Typed Variables
+Variables are not limited to being single input values. They can be complex objects with any declared *type* in a given workspace - native or custom. This allows for things like entire filters, sorts, and many others to get passed dynamically as variables. 
+
+The following two examples would work together for querying a list of *Posts* in "draft" status that belong to the *Author*, which is the logged in user - supplying the filter as a variable.
+
+##### JSON Variable
+```json
+{  
+   "filter":{  
+      "author":{  
+         "OR":[  
+            {  
+               "posts":{  
+                  "none":{  
+                     "status":{  
+                        "equals":"draft"
+                     }
+                  }
+               }
+            }
+            {  
+               "AND":[  
+                  {  
+                     "user":{  
+                        "id":{  
+                           "equals":"__loggedInUserId"
+                        }
+                     }
+                  }
+               ]
+            }
+         ]
+      }
+   }
+}
+```
+
+##### Query
+```js
+query ($filter: postFilter) {
+	postsList(filter: $filter) {
+    items {
+    	id
+      name
+    }
+  }
+}
+```
\ No newline at end of file
diff --git a/8base-console/handling-files.md b/8base-console/handling-files.md
new file mode 100644
index 0000000..b2151fe
--- /dev/null
+++ b/8base-console/handling-files.md
@@ -0,0 +1,17 @@
+# Files
+
+In the 8base GraphQL API, `Files` is just another table that supports all standard CRUD operations and connections to other tables. When you create a field of type `File`, the platform creates a relationship (connection) between your table and the `Files` table under the hood. This allows you to use connection-related operations such as `create`, `connect`, `disconnect` on file-type fields.
+
+To handle delivery and transformations on file uploads in the 8base Management Console, we've integrated with [Filestack](https://www.filestack.com/). [S3](https://aws.amazon.com/s3/) is then used to safely store the uploaded file. Thus, inside the **Data Viewer** you're able to easily manage files (pictures and documents) as they are attached to different records.
+
+### Managing Files
+
+##### Upload
+Inside the **Data Viewer** (`Data > Table Name > Data`) you're able to manage all records for the selected data table. When creating or editing a record, the `Add <File Type>` option will appear next to any pertaining data field. Using this option will launch the Filestack uploader, allowing you the option of uploading different files through a number of connected channels.
+
+![Data Viewer uploader with connected channels](../.gitbook/assets/data-viewer-upload.png)
+
+##### Delete
+In this same view, you are able to remove any file from a given record. Simply use the ellipsis dropdown located on the image and select "Delete". Make sure to save your changes before leaving the screen.
+
+![Delete files from a specific record](../.gitbook/assets/data-viewer-file-delete.png)
diff --git a/8base-console/platform-tools/README.md b/8base-console/platform-tools/README.md
new file mode 100644
index 0000000..0d9040a
--- /dev/null
+++ b/8base-console/platform-tools/README.md
@@ -0,0 +1,39 @@
+# Platform Tools
+
+8base allows developers to easily launch and manage scalable cloud infrastructures. The platform runs in a serverless, scalable and secure cloud environment powered by AWS and makes it trivial to manage data, files, users, permissions and other features commonly required by modern web and mobile applications.
+
+The 8base platform consists of the following high-level components.
+
+## [Data Builder](./data-builder.md)
+
+![8Base Data Builder](../../.gitbook/assets/44df042-fireshot_capture_004_-_8base_-_app.8base.com.png)
+
+The Data Builder lets you define an applications data model: tables, fields and relationships between tables. It is packed with cool features. For example, `File` fields allow you to seamlessly attach files to data objects, while `Smart` fields make it easy to implement complex validations for addresses and phone numbers.
+
+## [Data Viewer](./data-viewer.md)
+
+![8base Data Viewer](../../.gitbook/assets/e47095d-fireshot_capture_008_-_8base_-_app.8base.com.png)
+
+The Data Viewer lets you view and modify data in an table inspired interface. This is useful for admins needing to browse and modify the data, or enter sample content while in development.
+
+## [Role-based Security](../authentication.md)
+
+![Role-based security manager](../../.gitbook/assets/2b505e4-fireshot_capture_010_-_8base_-_app.8base.com.png)
+
+Role-based security lets you define custom roles with granular access controls. You can specify which tables and fields a role can read, modify or delete. You can even apply custom filters, such as giving users access only to records they created.
+
+## [GraphQL API](../graphql-api/READme.md)
+
+![8base GraphQL Explorer](../../.gitbook/assets/51fbda9-fireshot_capture_009_-_8base_-_app.8base.com.png)
+
+The GraphQL API is generated automatically from the data model you define. It gives power to front-end developers to query and modify the data in ways that were traditionally available only to back-end developers. It comes with robust filters, sorting, pagination, full-text search and is secured using the role-based security.
+
+## [CLI](../../development-tools/cli/READme.md)
+
+![8base CLI](../../.gitbook/assets/c890144-screenshot_2019-05-12_09.23.51.png)
+
+The Command-line Interface \(CLI\) allows you to develop and deploy custom backend logic in JavaScript or TypeScript. Need to run a custom algorithm, connect to a 3rd-party API, or execute a task on schedule? The CLI lets you deploy this logic in seconds to 8base serverless environment where it is executed and scaled automatically.
+
+## [Client Tools](../../development-tools/sdk/READme.md)
+
+The 8base SDK and Boost UI Kit provide a set of open-source libraries and UI components that simplify and accelerate front-end development. Libraries and UI components are pre-integrated with the 8base API to enable useful features, such as automatically applying client-side validation to form fields based on your data schema, seamless file uploads and more.
diff --git a/8base-console/platform-tools/data-builder.md b/8base-console/platform-tools/data-builder.md
new file mode 100644
index 0000000..b9dd009
--- /dev/null
+++ b/8base-console/platform-tools/data-builder.md
@@ -0,0 +1,179 @@
+# Data Builder
+
+The 8base Data Builder is a data modeling UI for defining database tables, field types, and relationships between tables. For each table defined, the 8base GraphQL engine creates GraphQL schema object types and the corresponding query, mutation, and subscription fields with resolvers automatically. 
+
+This means that all Create, Read, Update, and Delete (CRUD) actions, as well as real-time connections (websockets) are immediately available to use via the workspace's unique API endpoint. 
+
+Data Builder is found in the management console's `Data` view. It is packed with cool features. For example, `File` fields allow you to seamlessly attach files to records and `Smart` fields make it easy to implement complex validations for addresses or phone number.
+
+![8Base Data Builder](../../.gitbook/assets/data-builder-new-table.gif)
+
+## Tables
+In the background, 8base spins up an Aurora MySQL database instance for your workspace. Aurora is a relational database that can handle complex queries and is ACID (Atomicity, Consistency, Isolation, Durability) compliant. When tables are created, updated, and deleted in a workspace, 8base handles the corresponding migrations and executes them immediately against the database. Therefore, you're database is always reflected by the *Data Builder* UI - showing all available fields, validations, tables, and relations.
+
+### Creating Tables
+New tables are created using the "+ New Table" button. An input that prompts for a *name* value will appear, with which the table can named. All tables require unique names.
+
+As soon as a table is created, corresponding GraphQL schema types and query, mutation, and subscription resolvers will be generated automatically.
+
+![Creating new table's in the Data Builder](../../.gitbook/assets/data-builder-new-table.png)
+
+### Updating Tables
+After a table is created, fields and relations can get defined. All updates to a table are published in real-time, giving a seemless experience between defining a data model and having it be highly available. 
+
+As soon as a table is updated, its corresponding GraphQL schema types and query, mutation, and subscription resolvers will be updated automatically.
+
+To ensure that table related errors and mistakes are minimized, 8base protects against **dozens** of harmful actions. Some of these include:
+
+* A prompt that requires a *Default Value* will appear when changing a non-mandatory field to being mandatory.
+* Date, Number, and Text field values are auto-magically converted when an existing field *type* is updated.
+* When changing a non-unique field to being unique, current records are validated for having unqiue values.
+* Many more!
+
+### Deleting Tables
+A confirmation input that requires the table name to be typed in appears when attempting to delete a table. Please know that deleted tables **cannot** be restored and any existing table records will be lost. Additionally, if any other tables are related to the table being deleted - *belongs to* and *has many*, either specified as mandatory or not - those relations will be severed.
+
+![Deleting table's in the Data Builder](../../.gitbook/assets/data-builder-delete-table.png)
+
+### Table Relationships
+8base supports 3 types of table relationships to be defined that are congruent with what to expect from relational databases:
+
+| Type | *A* to *B* | *B* to *B* |
+| -- | -- | -- |
+| `one-to-one` | Records in table A may `have_one` or `belong_to` records in table B. | Records in table B may `have_one` or `belong_to` records in table A. |
+| `one-to-many` | Record in table A may `have_many` records in table B. | Records in table B may `have_one` or `belong_to` records in table A. |
+| many-to-many | Record in table A may `have_many` records in table B. | Record in table B may `have_many` records in table A. |
+
+![Defining relationships in the Data Builder](../../.gitbook/assets/data-builder-making-relationships.gif)
+
+Defining a relationship between two tables can be accomplished by dragging and dropping one table onto another, as well as by selecting `Table` as the Data Type when creating a new table field.
+
+#### Table Configurations
+For specifying *has many*, *has one* and *belongs to* relationships between tables.
+
+Configurations
+* *Table* - For selecting what table is to get related.
+* *Relation Field Name* - The name of the relation as it appears on the **corresponding** table.
+* *Allow Multiple X to Y* - Whether the relationship is *has one* or *has many*.
+* *Mandatory* - Whether the field relationship is required.
+* *Description* - A meta description used for documentation.
+
+{% hint style="info" %}
+##### Self-Referential Relationships
+
+Self-Referential relationships can be defined by relating tables to themselves! For example, a the *Users* table might have a `many-to-many` relationship with itself, and use a named association of *friends*.
+{% endhint %}
+
+### Table Types
+There are several types of tables in 8base, each of which offers an important utility.
+
+##### Custom Tables
+Custom tables are the tables created in any workspace by the administrator. They are fully customizable and managed by the administrator.
+
+##### System Tables
+System tables - like *Users* - are tables that come delivered with a workspace. They are fully extensible, meaning that new fields and relations can be added to them. However, they can neither be deleted, renamed, nor their existing fields changes.
+
+##### View Tables
+View Tables are virtual tables that aggregate fields from several or more tables into a single *view*. Under the hood, they are based on the result-set of an SQL statement. In a workspace, they can be created using the `viewCreate` GraphQL mutation in the API Explorer. 
+
+<small>For more information on views, [check this out](https://www.w3schools.com/sql/sql_view.asp).</small>
+
+## Fields
+8base offers all database field types required for building software - and some! Fields with the type File, Smart, and others have extended capabilities that streamline specific tasks - such as managing file/image uploads and validating addresses and phone numbers.
+
+### Creating Fields
+Every field gets defined on a table and requires a *name* and a *type*. Field names must be unique on the table, irresepective of their type. Once a new field has been created, a configurations modal will appear allowing for further customizations - each being specific to the field *type*.
+
+### Updating Fields
+Fields are easily updated using the same interface used to create them. Updates to attributes like the field's *name* - and even *type* in some cases - are changed in real-time, while changes configurations must be saved. If 8base detects an issue with the change being made, an alert will be display with instructions to remedy the issue.
+
+![Updating fields in the Data Builder](../../.gitbook/assets/data-builder-field-update.png)
+
+### Deleting Fields
+The "X" found on the right side of a field's name input gets clicked to delete a table. A confirmation modal that requires the field name to be typed in appears when attempting to delete a field. Deleted tables **cannot** be restored and any existing data be lost.
+
+### Field Types
+8base offer 8 field types that can be configured to fit almost any data requirement.
+
+#### Text 
+For storing *String* data.
+
+Configurations
+* *Field Size* - The maximum string length.
+* *Allow Multiple* - Stores 0 or more *Text* values in an array (not searchable).
+* *Mandatory* - Whether the field value is required.
+* *Unique* - Whether the field value is required to be unique.
+* *Default Value* - A default value assigned to new records.
+* *Description* - A meta description used for documentation.
+
+#### Number
+For storing *Integer*, *BigInt*, and *Float* data.
+
+Configurations
+* *Decimal Place* - How many decimal places *Float* values maintain.
+* *Big Number* - For numbers outside the range `-2^63 (-9,223,372,036,854,775,808) to 2^63-1 (9,223,372,036,854,775,807)`
+* *Minimum Value* - The minimum value required.
+* *Maximum Value* - The maximum value required.
+* *Allow Multiple* - Stores 0 or more *Number* values in an array (not searchable).
+* *Mandatory* - Whether the field value is required.
+* *Unique* - Whether the field value is required to be unique.
+* *Default Value* - A default value assigned to new records.
+* *Description* - A meta description used for documentation.
+
+#### Date
+For storing *Date* and *DateTime* data.
+
+Configurations
+* *Format* - Whether the field stores a *Date* or a *DateTime* value.
+* *Allow Multiple* - Stores 0 or more *Date* values in an array (not searchable).
+* *Mandatory* - Whether the field value is required.
+* *Unique* - Whether the field value is required to be unique.
+* *Default Value* - A default value assigned to new records.
+* *Description* - A meta description used for documentation.
+
+#### Switch
+For storing *Boolean* and custom *Enum* type data.
+
+Configurations
+* *Format* - For specifying the *Boolean* type (true / false, yes / no, etc...)
+* *Allow Multiple* - Stores 0 or more *Boolean* values in an array (not searchable).
+* *Mandatory* - Whether the field value is required.
+* *Default Value* - A default value assigned to new records.
+* *Description* - A meta description used for documentation.
+
+#### File
+For storing *Image* and *File* objects.
+
+Configurations
+* *Format* - Whether the field stores a *File* or an *Image*.
+* *Allow Multiple* - Stores 0 or more *File* objects in an array.
+* *Mandatory* - Whether the field value is required.
+* *Description* - A meta description used for documentation.
+
+#### Table
+For specifying *has many*, *has one* and *belongs to* relationships between tables.
+
+Configurations
+* *Table* - For selecting what table is to get related.
+* *Relation Field Name* - The name of the relation as it appears on the **corresponding** table.
+* *Allow Multiple X to Y* - Whether the relationship is *has one* or *has many*.
+* *Mandatory* - Whether the field relationship is required.
+* *Description* - A meta description used for documentation.
+
+#### Smart
+For storing *addresses* and *phone numbers* with managed validations and logic. 
+
+Configurations
+* *Format* - Whether the field stores a *Phone Number* or an *Address*.
+* *Allow Multiple* - Stores 0 or more *Smart* objects in an array.
+* *Mandatory* - Whether the field value is required.
+* *Description* - A meta description used for documentation.
+
+#### JSON
+For storing *JSON* objects.
+
+Configurations
+* *Mandatory* - Whether the field value is required.
+* *Default Value* - A default value assigned to new records.
+* *Description* - A meta description used for documentation.
+
diff --git a/8base-console/platform-tools/data-viewer.md b/8base-console/platform-tools/data-viewer.md
new file mode 100644
index 0000000..69555bc
--- /dev/null
+++ b/8base-console/platform-tools/data-viewer.md
@@ -0,0 +1,30 @@
+# Data Viewer
+
+While logged into a project's workspace, 8base provides an "Admin Panel" like interface for searching and managing table records. This *Data Viewer* is located within the management console's *Data* screen, tabbed alongside each table's *Schema*. 
+
+![8Base Data Viewer](../../.gitbook/assets/data-viewer.png)
+
+## Adding Records
+New table records can be added using the "+" button next to the table name. A form modal will appear which displays all table fields. All validations specified in the schema definition are enforced while using the data viewer.
+
+![Adding a new record in the Data Viewer](../../.gitbook/assets/data-viewer-add.png)
+
+### Filtering Records
+When viewing a table's records, filters can be applied to narrow down the list of record desiplayed. Multiple filters can be added and used together. Please note, the Data Viewer's filtering UI does not support filtering based on related tables. Use API Explorer for advanced filtering.
+
+![Filtering records in the Data Viewer](../../.gitbook/assets/data-viewer-filtering.png)
+
+### Sorting Records
+Data records can be sorted by using one or more sortable attributes. Sort attributes are ranked in the order in which they were created. Additionally, the filters can be applied to narrow down the list of records desiplayed. Multiple filters can be added and used together. Please note, the Data Viewer's sorting UI does not support sorting based on related table values. Use API Explorer for advanced sorting.
+
+![Sorting records in the Data Viewer](../../.gitbook/assets/data-viewer-sorting.png)
+
+### Selected Fields
+By default, the *id*, *createdAt*, and *updatedAt* field columns are hidden in the Data Viewer. In order to customize which fields and columns display for a given table, simply click on the `[Selected Fields]` dropdown and toggle on/off desired fields.
+
+![Selecting fields in the Data Viewer](../../.gitbook/assets/data-viewer-selected-fields.png)
+
+### Importing Data
+Importing data from CSV files is supported and can be opened by clicking the `[Import CSV]` option located in the top-right elipsis dropdown menu. The CSV importer supports column mapping and enforces all schema defined validations on create.
+
+![Importing records into the Data Viewer](../../.gitbook/assets/data-viewer-import.gif)
diff --git a/8base-console/roles-and-permissions.md b/8base-console/roles-and-permissions.md
new file mode 100644
index 0000000..ade6ec3
--- /dev/null
+++ b/8base-console/roles-and-permissions.md
@@ -0,0 +1,161 @@
+# Authorization
+
+Authorization in 8base uses a robust roles and permissions system that lets you securely control access to any data resources in a workspace. You use the roles and authorization system to control what users (with roles) are able to access and who is authorized (has permission) to do what.
+
+### Managing Roles
+
+*Roles* in 8base are best described as a single identifier for a collection of *permissions*. A user can have one or more *roles* associated with their account, each of which may allow them to perform zero or more actions.
+
+##### View all Roles
+
+The *Roles* Manager can be found in a given workspace by navigating to `Settings > Roles`. In this view, you can find all 8base and customer defined roles associated with the current workspace. By default, all workspaces are created with two default roles; *Administrator* and *Guest*.
+
+* **Administrator** has all permissions enabled by default
+* **Guest** has no permissions enabled by default
+
+*Note: all roles are fully editable.*
+
+![Roles Management Screen in 8base Console](../.gitbook/assets/roles-index.png)
+
+##### Create new Role
+
+Creating a new custom Role is simple. In the Roles Manager view (`Settings > Roles`), click the `+ New Role` button at the bottom of the screen. Add a unique name (required) and a simple description before clicking `Add Role`. You may optionally assign users to the new role in the create form. However, this may also be done at anytime in the future once permissions have been specified.
+
+![Create a new role in the 8base Console](../.gitbook/assets/create-role.png)
+
+##### Deleting a Role
+
+To delete a role, toggle the ellipsis toggle located at the end of the roles table row. Click the `Delete` option and then confirm your action through the modal.
+
+![Create a new role in the 8base Console](../.gitbook/assets/delete-role.png)
+
+### Managing Permissions
+
+**Permissions** in 8base refer to the specific actions a user is authorized to take. These permissions are defined under a *Role*, which is then attributed to a user. For example, a permission that authorizes a user to read *Posts* may be defined under the *Guest* role.
+
+In the Roles Manager view (`Settings > Roles`), click on the name of a *Role* whose permissions you'd like to update. You'll be taken to a view containing three tabs; *Data*, *Apps* and *Roles*.
+
+##### Data
+Lists all data tables in the current workspace. Each table exposes the ability to set Create, Read, Update, Delete (CRUD) and Field permissions using simple controls. If fine-tuned permissions beyond CRUD actions are required, `Custom Filters` on tables and `Custom Access` on fields can be implemented.
+
+![Data permissions in Roles Manager](../.gitbook/assets/role-permissions-data.png)
+
+##### Apps
+Allows toggling of role permissions for 8base Management Console administration, such as Schema Management, Workspace Settings, Team Administration and more.
+
+![Apps permissions in Roles Manager](../.gitbook/assets/role-permissions-apps.png)
+
+##### Users
+Lists all users that hold the selected role and allows for easy role assignment and de-assignment to specific users.
+
+*Note: By default, all users are granted the **Guest** role. You may change the name of the Guest role in the edit form.*
+
+![Apps permissions in Roles Manager](../.gitbook/assets/role-permissions-users.png)
+
+### Advanced
+Custom filters are applied to the *Read* and *Update* permissions of any role, making advanced scoping of the records possible. These filters get constructed using `JSON` and mirror table specific GraphQL filter types.
+
+##### Default Filters
+To better understand custom filters, lets reference two default filters that come configured in new workspaces.
+
+* **Table**: Users  
+* **Permission**: Read and Update
+
+New roles, by default, don't allow the logged in user to read or update other user records. To enforce this, a custom filter is applied to role's read and update permission in regards to the *Users* table. 
+
+```json
+{
+  "id": {
+    "equals": "__loggedInUserId"
+  }
+}
+```
+
+In this example, `__loggedInUserId` is a dynamic variable that 8base replaces with the logged in user's ID. If the ID of the logged in user does not match the ID of a given user record, it cannot be read or updated.
+
+{% hint style="info" %}
+##### Dynamic Variables
+
+The `__loggedInUserId` is used in both *Custom Filters* and the API Explorer for dynamic filtering!
+{% endhint %}
+
+* **Table**: Files  
+* **Permission**: Read and Update
+
+8base stores media (videos, documents, images, etc...) as records in a system table called *Files*. This makes it necessary for media to be scoped, by default, to the following constraints:
+
+1. When a file is public, anyone can view it.
+2. When a file is private, only the user it was created by can view it.
+
+These constraints get enforced using the following filter.
+
+```json
+{
+  "OR": [
+    {
+      "public": {
+        "equals": true
+      }
+    },
+    {
+      "createdBy": {
+        "id": {
+          "equals": "__loggedInUserId"
+        }
+      }
+    }
+  ]
+}
+```
+
+##### Custom Filters
+{% youtube src="https://www.youtube.com/watch?v=FqZ0-usc93w" %}{% endyoutube %}
+
+The best way to write custom filters is by using the API Explorer in conjuction with [Variables](./graphql-api/variables.md). The filtered result of any GraphQL query is the scoped record set that can be expected by using the same filter as a role's *Custom Filter*.
+
+For example, imagine that a workspace has both *Posts* and *Authors* tables. In the API Explorer, an 8base user wants to query all *Posts* that belong to *Authors* under the following criteria:
+
+1. Only authors who work for Stage Media (have *@stagemedia.com* email handles) 
+2. Only authors who have been attributed a *Role* named "Editor".
+
+GraphQL Query
+```js
+/* GraphQL Query */
+query($filter: PostFilter) {
+  postsList(filter: $filter) {
+    items {
+      id
+      title
+    }
+  }
+}
+```
+
+Query Variable
+```json
+{
+	"filter": {
+    "author": {
+      "user": {
+        "email": {
+          "ends_with": "@stagemedia.com"
+        },
+        "roles": {
+          "some": {
+            "name": {
+              "equals": "Editor"
+            }
+          }
+        }
+      }
+    } 
+  }
+}
+```
+
+After succesfully running this query, the user decides that the filter should be utilized as a custom filter for post updates. That way, only *editors* would only be able to update posts that belong to authors from their own company. 
+
+To accomplish this, the value of the `filter` key can be pasted into the *Custom Filter* section of the desired role's update permission.
+
+
+![Adding custom filters to roles](../.gitbook/assets/roles-and-permissions-custom-filter-create.png)
diff --git a/MD_EXAMPLES.md b/MD_EXAMPLES.md
new file mode 100644
index 0000000..10d773f
--- /dev/null
+++ b/MD_EXAMPLES.md
@@ -0,0 +1,125 @@
+---
+description: EXAMPLE OF ALL MARKDOWN COMPONENTS FOR DOCUMENTATION DEVELOPMENT
+---
+
+For the time being, we're using GitBook to display our docs at [https://docs.8base.com](https://docs.8base.com). Because of that, we have some neat markdown plugins that you can leverage when writing documentation.
+
+They're below... Go to town! 
+
+*Hint: View the Raw file to see all markdown syntax.*
+
+Paragraphs look like this.
+
+## Heading 1
+
+### Heading 2
+
+#### Heading 3
+
+* Bulleted
+* Lists
+* Like
+* This
+
+1. Ordered
+2. Lists
+3. Like
+4. This
+
+* [ ] This is
+* [ ] a task
+* [ ] list
+
+```javascript
+function thisIsJavaScriptCode() {}
+```
+
+```typescript
+const TypeScript = (arg: string) => {}
+```
+
+> Nothing like a quote
+
+![Check out this logo and caption](.gitbook/assets/8base-logo.png)
+
+| Table Header 1 | Table Header 2 |
+| :--- | :--- |
+| Something | Important |
+
+{% hint style="info" %}
+Just to give you a hint!
+{% endhint %}
+
+This is a link to a page!
+
+{% page-ref page="not-for-documentation.md" %}
+
+{% api-method method="get" host="" path="" %}
+{% api-method-summary %}
+An epic tool for API Endpoints and Responses!
+{% endapi-method-summary %}
+
+{% api-method-description %}
+
+{% endapi-method-description %}
+
+{% api-method-spec %}
+{% api-method-request %}
+{% api-method-path-parameters %}
+{% api-method-parameter name="" type="string" required=false %}
+
+{% endapi-method-parameter %}
+{% endapi-method-path-parameters %}
+{% endapi-method-request %}
+
+{% api-method-response %}
+{% api-method-response-example httpCode=200 %}
+{% api-method-response-example-description %}
+
+{% endapi-method-response-example-description %}
+
+```
+
+```
+{% endapi-method-response-example %}
+{% endapi-method-response %}
+{% endapi-method-spec %}
+{% endapi-method %}
+
+{% tabs %}
+{% tab title="First Tab" %}
+Tabs can also 
+{% endtab %}
+
+{% tab title="Second Tab" %}
+Be super userful
+{% endtab %}
+{% endtabs %}
+
+$$
+a + (Math stuff) = a well formatted equation
+$$
+
+{% file src=".gitbook/assets/8base-logo.png" caption="This is what an uploaded file looks like \(filename here\)" %}
+
+
+# Code Tabs 
+{% code-tabs %}
+{% code-tabs-item title="Bash" %}
+```bash
+
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="JavaScript" %}
+```javascript
+
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Python" %}
+```python
+
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..01a62f6
--- /dev/null
+++ b/README.md
@@ -0,0 +1,70 @@
+# Introduction
+
+[**Sign Up for 8Base**](https://app.8base.com)	🤘	[**Documentation Home**](https://docs.8base.com)	📑	[**Getting Started**](https://docs.8base.com/getting-started/quick-start)	🚀	[**8base Plans**](https://www.8base.com/pricing)
+
+## Welcome!
+
+Welcome to 8base! We're so glad you're here. We've poured countless hours into creativity and code to create 8base. All of that effort intended solely to support you in building something amazing.
+
+Reading this documentation is the first step to becoming an 8base master, which in turn will make you into a 21st century software whiz-kid. Seriously, it's that good.
+
+Always let us know how we can help!
+
+![Zen Master](.gitbook/assets/zen-developer.png)
+
+## Connecting with the Community
+
+While building on 8base and checking out the docs, you might have some questions. Actually, lets re-phrase that... while building on 8base YOU'LL DEFINITELY HAVE SOME QUESTIONS. When such a situation arises, fret not. We're here for you.
+
+> ### [Join us on Slack](https://slack.8base.com/)  
+  Chat with other 8base developers and our support team.  
+  
+> ### [Start a Topic on 8base's Discourse](https://community.8base.com)  
+  Create topics for new feature suggestions, code support, or debugging help.  
+  
+
+## Contributing to 8base Docs
+Like most great things, 8base is a work in progress. As a consequence of that, our documentation is constantly under development and probably in need of some TLC. Right now, we have two team members that are maintaining the docs, and frankly, they could use a little help...
+
+That's where YOU come in. 
+
+🎉 **8base's awesome contributors** 🎉
+<!-- ALL-CONTRIBUTORS-LIST:START -->
+<!-- prettier-ignore-start -->
+<!-- markdownlint-disable -->
+<table>
+  <tr>
+    <td align="center"><a href="https://github.com/kelseyyim"><img src="https://avatars3.githubusercontent.com/u/32113193?v=4" width="100px;" alt="Kelsey Yim"/><br /><sub><b>Kelsey Yim</b></sub></a><br /><a href="https://github.com/8base/Documentation/commits?author=kelseyyim" title="Documentation">📖</a></td>
+    <td align="center"><a href="https://github.com/sebscholl"><img src="https://avatars3.githubusercontent.com/u/13649537?v=4" width="100px;" alt="Seb Scholl"/><br /><sub><b>Seb Scholl</b></sub></a><br /><a href="https://github.com/8base/Documentation/commits?author=sebscholl" title="Documentation">📖</a> <a href="[🎱]("8base")," title="8base">🎱</a> <a href="https://github.com/8base/Documentation/issues?q=author%3Asebscholl" title="Bug reports">🐛</a> <a href="#ideas-sebscholl" title="Ideas, Planning, & Feedback">🤔</a></td>
+    <td align="center"><a href="https://twitter.com/_marktani"><img src="https://avatars1.githubusercontent.com/u/1780597?v=4" width="100px;" alt="Nilan Marktanner"/><br /><sub><b>Nilan Marktanner</b></sub></a><br /><a href="https://github.com/8base/Documentation/commits?author=marktani" title="Documentation">📖</a></td>
+    <td align="center"><a href="https://github.com/mikeaustin"><img src="https://avatars1.githubusercontent.com/u/343144?v=4" width="100px;" alt="Mike Austin"/><br /><sub><b>Mike Austin</b></sub></a><br /><a href="https://github.com/8base/Documentation/commits?author=mikeaustin" title="Documentation">📖</a></td>
+    <td align="center"><a href="http://www.linuxsystems.it/"><img src="https://avatars1.githubusercontent.com/u/1047358?v=4" width="100px;" alt="Niccolò Belli"/><br /><sub><b>Niccolò Belli</b></sub></a><br /><a href="https://github.com/8base/Documentation/issues?q=author%3Adarkbasic" title="Bug reports">🐛</a></td>
+  </tr>
+</table>
+
+<!-- markdownlint-enable -->
+<!-- prettier-ignore-end -->
+<!-- ALL-CONTRIBUTORS-LIST:END -->
+
+Our documentation repo is public and open-sourced [right here](https://github.com/8base/documentation) on GitHub. So whenever you want to, you could:
+
+* Report missing sections: Think something **should** be in the documentation that **isn't**? [Create an issue](https://github.com/8base/documentation/issues) to let us know!
+* Submit pull requests: Want to not only point out the problem but be apart of the solution? Clone the Documentation repo and submit pull requests start... pretty much anything, like:
+	* Grammar and spelling
+	* Errors in any code example
+	* Even BETTER code examples
+	* Missing sections
+	* Better descriptions
+	* A nice GIF of a police man in the Authorization section
+	* Anything else...
+
+If you need help getting started, just reach out to us at [support@8base.com](mailto:support@8base.com). However, here are some more complete descriptions of work that can be done.
+
+### 1. Reporting an Issue
+8base uses GitHub Issue Tracking to track issues (primarily bugs and contributions of new code). If you've found a bug in 8base, this is the place to start. You'll need to create a (free) GitHub account in order to submit an issue, to comment on them or to create pull requests.
+
+### 2. Create an Awesome Code Example
+Examples are sooo important in great documentation and are very helpful for the 8base community. You can help by providing complete code examples, or by editing the current ones. Honestly, if you think "a, b, and c examples are terrible and I could make them better", please do! We won't take it personally...
+
+### 3. Contributing Articles
+You can help improve the 8base Docs by making them more coherent, consistent, or readable and adding missing information, correcting factual errors, fixing typos, and bringing them up to date with the latest 8base features. It's honestly an open-book. If you think something is useful, others probably will too.
\ No newline at end of file
diff --git a/SUMMARY.md b/SUMMARY.md
new file mode 100644
index 0000000..5cc4959
--- /dev/null
+++ b/SUMMARY.md
@@ -0,0 +1,69 @@
+# Table of contents
+
+* [Introduction](README.md)
+
+## Getting Started
+
+* [Overview](getting-started/getting-started.md)
+* [Quick Start](getting-started/quick-start.md)
+* [Connecting to API](getting-started/connecting-to-api.md)
+
+## 8base Console
+
+* [Overview](8base-console/READme.md)
+* [Authentication](8base-console/authentication.md)
+* [Authorization](8base-console/roles-and-permissions.md)
+* [Handling Files](8base-console/handling-files.md)
+
+* [Platform Tools](8base-console/platform-tools/README.md)
+  * [Data Builder](8base-console/platform-tools/data-builder.md)
+  * [Data Viewer](8base-console/platform-tools/data-viewer.md)
+
+* [GraphQL API](8base-console/graphql-api/README.md)
+  * [Queries](8base-console/graphql-api/queries/README.md)
+    * [Single record queries](8base-console/graphql-api/queries/single-record-query.md)
+    * [Related record queries](8base-console/graphql-api/queries/related-record-query.md)
+    * [Aggregators](8base-console/graphql-api/queries/aggregation-query.md)
+    * [Record list queries](8base-console/graphql-api/queries/record-list-query.md)
+    * [Filtered list queries](8base-console/graphql-api/queries/filtered-list-query.md)
+    * [Sorted list queries](8base-console/graphql-api/queries/sort-list-query.md)
+    * [Pagenated list queries](8base-console/graphql-api/queries/paginated-query-results.md)
+    * [Combining arguments](8base-console/graphql-api/queries/combining-arguments.md)
+    * [Combining queries](8base-console/graphql-api/queries/combining-queries.md)
+
+  * [Mutations](8base-console/graphql-api/mutations/README.md)
+    * [Single record mutations](8base-console/graphql-api/mutations/single-record-mutations.md)
+    * [Related record mutations](8base-console/graphql-api/mutations/related-record-mutations.md)
+
+  * [Subscriptions](8base-console/graphql-api/subscriptions/README.md)
+    * [Simple subscriptions](8base-console/graphql-api/subscriptions/simple-record-subscriptions.md)
+    * [Scoped subscriptions](8base-console/graphql-api/subscriptions/complex-record-subscriptions.md)
+
+  * [Variables](8base-console/graphql-api/variables.md)
+  * [Error Handling](8base-console/graphql-api/error_handling.md)
+
+* [Custom Functions](8base-console/custom-functions/README.md)
+  * [Webhooks](8base-console/custom-functions/webhooks.md)
+  * [Triggers](8base-console/custom-functions/triggers.md)
+  * [Tasks](8base-console/custom-functions/tasks.md)
+  * [Resolvers](8base-console/custom-functions/resolvers.md)
+  * [Debugging](8base-console/custom-functions/debugging.md)
+
+## Development Tools
+
+* [Development Environment](development-tools/dev-env/README.md)
+  * [Project Structure](development-tools/dev-env/project-structure.md)
+  * [8base Config](development-tools/dev-env/8base-yml.md)
+  * [Environment](development-tools/dev-env/runtime_environment.md)
+
+* [CLI](development-tools/cli/README.md)
+  * [Commands](development-tools/cli/commands.md)
+  * [Generators](development-tools/cli/generators.md)
+
+* [SDK](development-tools/sdk/README.md)
+  * [User Auth](development-tools/sdk/auth/README.md)
+    * [React](development-tools/sdk/auth/react-auth.md)
+  * [Application File Uploads](development-tools/sdk/file_upload.md)
+  * [VS Code Plugin](development-tools/sdk/vs_code_plugin.md)
+  * [Filestack](development-tools/sdk/filestack-uploader.md)
+
diff --git a/_archive/READme.md b/_archive/READme.md
new file mode 100644
index 0000000..bf4a9e4
--- /dev/null
+++ b/_archive/READme.md
@@ -0,0 +1,3 @@
+# Archive
+
+This directory will not show in the Documentation. It is intended for old or stale docs, rather than deleting them.
\ No newline at end of file
diff --git a/_archive/react-app-with-appolo-client.md b/_archive/react-app-with-appolo-client.md
new file mode 100644
index 0000000..1c10f8f
--- /dev/null
+++ b/_archive/react-app-with-appolo-client.md
@@ -0,0 +1,187 @@
+### Create React App \(w/ [Apollo Client](https://www.apollographql.com/docs/react/)\)
+
+1. `create-react-app todo-8base`
+2. `cd todo-8base`
+3. `npm install apollo-boost graphql-tag react-apollo --save graphql`
+4. Open text editor and delete unnecessary files
+5. You’ll need to wrap your code in ApolloProvider in order to send graphql requests.
+
+Replace the code in App.js with the following:
+
+```javascript
+import React, { Component } from 'react';
+import { graphql, ApolloProvider } from 'react-apollo';
+import ApolloClient from "apollo-boost";
+import gql from 'graphql-tag';
+import Todos from './Todos';
+
+const client = new ApolloClient({
+  uri: "{API_ENDPOINT}"
+});
+
+class App extends Component {
+  render() {
+    return (
+      <ApolloProvider
+        client={client}
+         >
+         <Todos />
+      </ApolloProvider>
+    );
+  }
+}
+```
+
+1. Next you need to create the Todos component - create a new file called Todos.jsx in the _src_ directory
+2. Copy and paste this code
+
+```javascript
+import React from 'react';
+import gql from 'graphql-tag';
+import { graphql} from 'react-apollo';
+
+let Todos = ({todos}) => {
+
+  return (
+    <div>
+      {
+        todos.map((item) => {
+        return  <h1>{item.text}</h1>
+      })}
+    </div>
+  )
+}
+
+const GET_TODOS_QUERY = gql`
+  query {
+    todosList {
+      items {
+        text
+      }
+    }
+  }
+`
+
+export default graphql(GET_TODOS_QUERY, {
+  props: (result) => {
+    const { loading, data } = result;
+    let items = [];
+    if (data && data.todosList) items = data.todosList.items;
+    return {
+      loading,
+      todos: items
+    }
+  }
+})(Todos);
+```
+
+> Here we are using the graphql function from react-apollo to inject the result of the query as a prop into our Todos component. See more [here](https://www.apollographql.com/docs/react/basics/setup#graphql)
+
+1. Make sure you are in the root directory and run `npm start` - this should start your development server and display the queries from the Todos table.
+
+Mutate:
+
+1. In the same project as before, create a class component called createTodos in App.js. This will handle user input and send the graphql request to make a new todo.
+
+   It should look something like this
+
+```javascript
+class CreateTodo extends Component {
+  state = {
+    todo: ''
+  }
+
+  handleChange = (event) => {
+    this.setState( {todo: event.target.value})
+  }
+
+  handleSubmit = (event) => {
+    event.preventDefault()
+    this.props.createTodo({ text: this.state.todo });
+  }
+
+  render(){
+
+    return (
+      <form onSubmit={this.handleSubmit}>
+        <input
+          value={this.state.todo}
+          onChange={this.handleChange}
+          />
+        <input type="submit" value="Submit" />
+      </form>
+    )
+  }
+}
+```
+
+1. The createTodo function that gets called onSubmit is what we’re going to focus on. We don’t actually have this function implemented yet so lets go ahead and add that to our code:
+
+```javascript
+const CREATE_TODO_MUTATION = gql`
+  mutation TodoCreate($data: TodoCreateInput!) {
+    todoCreate(data: $data) {
+      id
+      text
+      completed
+    }
+  }
+`;
+
+const GET_TODOS_QUERY = gql`
+  query {
+    todosList {
+      items {
+        text
+      }
+    }
+  }
+`
+
+const withCreateTodo = graphql(CREATE_TODO_MUTATION, {
+  props: ({ mutate }) => ({
+    createTodo: ({ text }) => {
+      mutate({
+        variables: { data: { text, completed: false } },
+        refetchQueries: [{ query: GET_TODOS_QUERY }]
+      });
+    }
+  })
+});
+```
+
+> Here we are using the graphql function again, only this time we are using the second parameter \(config\) to define the _createTodo_ function. Defining the _createTodo_ function in the context of graphql lets you access the function later in the component it is being injected into. This way you are able to pass query variables from that component as an argument to the _createTodo_ function and use them in your mutation.
+
+1. The last thing we have to do is inject the createTodo function into our CreateTodo component so we can execute it in our application. Add the following line of code to App.js and add an instance of the CreateTodo component in App:
+
+```javascript
+CreateTodo = withCreateTodo(CreateTodo);
+
+class App extends Component {
+  render() {
+    return (
+      <ApolloProvider
+        client={client}
+         >
+         <CreateTodo />
+         <Todos />
+      </ApolloProvider>
+    );
+  }
+};
+```
+
+1. Run `npm start` and create a new record via the input box.
+
+Mutate with Authentication
+
+1. Add the following code to the client declaration in App.js 
+
+```javascript
+const client = new ApolloClient({
+  uri: "{your-api-endpoint}",
+  headers: {
+    Authorization: 'Bearer {API_TOKEN}'
+  }
+});
+```
\ No newline at end of file
diff --git a/development-tools/cli/README.md b/development-tools/cli/README.md
new file mode 100644
index 0000000..5655906
--- /dev/null
+++ b/development-tools/cli/README.md
@@ -0,0 +1,44 @@
+# CLI
+
+The 8base Command Line Interface \(CLI\) makes it easy to generate custom functions and manage workspaces straight from the terminal. Run the following commands to get going!
+
+## Install
+```sh
+# Install the CLI Globally 
+$ npm install -g 8base-cli
+
+# Ensure proper install
+$ 8base -v
+
+# See what's possible!
+$ 8base -h
+=>
+DESCRIPTION
+  The 8base Command Line Interface is a unified tool to manage your 8base workspaces services.
+
+USAGE
+  8base <command> [OPTIONS]
+
+  Use 8base command `--help` for information on a specific command. Use 8base help topics to view a list of available help topics. The synopsis for each command shows it’s parameters and their usage. Optional options are shown in square brackets.
+
+COMMANDS
+  8base config               Allows you to select a default workspace and retrieve the API endpoint URL.
+  8base deploy               Deploys project in current directory to 8base using 8base.yml config file. To use this command,
+                             you must be in the root directory of your 8base project.
+  8base describe [name]      Describes your 8base project’s functions and their types through 8base.yml file.
+  8base export               Export current workspace data schema
+  8base generate <command>   Generator for server and client side resources                                        [aliases: g]
+  8base import               Import 8base schema file and data to the current - or specified - workspace.
+  8base init                 Initializes a new project with example directory structure and custom functions.
+  8base invoke <name>        Invokes a custom function in the production workspace.
+  8base invoke-local <name>  Invokes the custom function in the local development workspace.
+  8base login                Authenticates the command line user by letting them log into an 8base account.
+  8base logout               Clears local login credentials and invalidates API session.
+  8base logs                 Authenticates the command line user by letting them log into an 8base account.
+  8base package              Package 8base application without deploying it.
+
+OPTIONS
+  --version, -v  Show version number
+  --debug, -d    Turn on debug logs
+  --help, -h     Show help
+```
diff --git a/development-tools/cli/commands.md b/development-tools/cli/commands.md
new file mode 100644
index 0000000..fcae8ef
--- /dev/null
+++ b/development-tools/cli/commands.md
@@ -0,0 +1,159 @@
+# CLI Commands
+
+Below is a list of available CLI commands. You can always get the most current list of commands using the CLI. Just run:
+
+```sh
+# See all commands
+$ 8base --help
+
+# Detail specific command
+$ 8base [COMMAND_NAME] --help
+```
+
+### Commands
+When running CLI commands, certain option flags are always available. Currently, they are:
+
+OPTIONS:  
+* `--debug`, `-d`  Turn on debug logs                                                     
+* `--help`, `-h`   Show help descriptions
+
+##### deploy
+Deploys project in current directory to 8base using `8base.yml` config file. To use this command, you must be in the root directory of your 8base project.
+
+```sh
+$ 8base deploy [OPTIONS]
+```
+
+##### describe
+Describes your 8base project’s functions and their types through 8base.yml file, as well as retrieve your workspace endpoint.
+
+```sh
+$ 8base describe [OPTIONS]
+```
+
+##### init
+Initializes a new project with suggested directory structure and example custom functions.
+
+```sh
+$ 8base init [PROJECT_NAME]
+```
+
+OPTIONS:   
+* `--functions`, `-f`  	List of functions - type: array, default: 'resolver:resolver', 'task:task', 'webhook:webhook', 'trigger:trigger']
+* `--empty`, `-e` 		Skip examples - type: boolean, default: false
+* `--mocks`, `-x`     	Included mocks dir and files - type:boolean, default: true
+* `--syntax`, `-s`  	Syntax for the generated file - type: string, default: 'ts', allowed: 'js', 'ts'
+* `--silent`        	Disable printing extra info to the console - type: boolean, default: false
+
+##### generate
+Generate projects, functions, and some client side resources
+
+```sh
+$ 8base generate [RESOURCE_NAME] [OPTIONS]
+```
+
+Generators deserve a section of their own! Check it out [here](./generators.md).
+
+##### invoke
+Invokes a custom function in the production workspace.
+
+```sh
+$ 8base invoke [FUNCTION NAME] [OPTIONS]
+```
+OPTIONS:
+* `--data-json`, `-j`  Input JSON - type: string
+* `--data-path`, `-p`  Path to input - type: path
+* `--mock`, `-m`       Name of the mock file - type: string
+
+##### invoke-local
+Invokes the custom function in the local development workspace.
+
+```sh
+$ 8base invoke-local [FUNCTION NAME] [OPTIONS]
+```
+
+OPTIONS: 
+* `--data-json`, `-j`  Input JSON - type: string
+* `--data-path`, `-p`  Path to input - type: path
+* `--mock`, `-m`       Name of the mock file - type: string
+
+##### login
+Authenticates the command line user by letting them log into an 8base account.
+
+```sh
+$ 8base login [OPTIONS]
+```
+
+OPTIONS:  
+* `-e`, `--email`	 User email - type: string
+* `-p`, `--password` User password - type: string
+
+EXAMPLES:
+* `8base login`
+* `8base login -e my@email.com -p S3cretP@ssw0rd`
+
+##### logout
+Clears local login credentials and invalidates API session.
+
+```sh
+$ 8base logout
+```
+
+##### logs
+View a specific functions production logs.
+
+```sh
+$ 8base logs [FUNCTION NAME] [OPTIONS]
+```
+
+OPTIONS: 
+* `-n`, `--num` 	Number of lines to display - type: sting, default: 10, max: 100 
+* `-t`, `--tail` 	Continually stream logs - type: boolean
+
+##### package
+Package 8base application without deploying it.
+ 
+```sh
+$ 8base package [OPTIONS]
+```
+
+##### version
+Output 8base CLI version.
+
+```sh
+$ 8base version
+```
+
+##### config
+Allows you to select a default workspace and retrieve the API endpoint URL. 
+
+```sh
+$ 8base config [OPTIONS]
+```
+
+OPTIONS:
+* `-w`, `--workspace` set current workspace
+
+##### export
+Export current - or specified - workspace data schema to a local file
+
+```sh
+$ 8base export [OPTIONS]
+```
+
+OPTIONS:  
+* `-f`, `--file` 		Destination file
+* `-w`, `--workspace`  	Custom workspace id
+
+##### import
+Import 8base schema file and data to the current - or specified - workspace.
+
+```sh
+8base import OPTIONS
+```
+
+OPTIONS:
+* `-f`, `--file` 		Path to file with schema - type: string, required: true
+* `--schema` 			Import schema only - type: boolean, default: true
+* `--data` 				Import data only - type: boolean, default: true
+* `-w`, `--workspace`   Specify workspace id - type: string
diff --git a/development-tools/cli/generators.md b/development-tools/cli/generators.md
new file mode 100644
index 0000000..993dbf6
--- /dev/null
+++ b/development-tools/cli/generators.md
@@ -0,0 +1,189 @@
+# Generators
+
+Generators are awesome. Essentially, they can be used to reliably scaffold application resources – like custom functions – that can then get customized. Relying on generators will also help ensure that your project directories stay organized.
+
+### Commands
+When running `8base generate [COMMAND]`, certain option flags are always available. Currently, they are:
+
+OPTIONS:  
+* `--debug`, `-d`  	Turn on debug logs                                                     
+* `--help`, `-h` 	Show help descriptions
+* `--silent` 	    Disable printing extra info to the console
+
+Let's walk through a few examples of using generators.
+
+### Custom Functions
+Custom function generators will add all the files required for a given type, along with boiler-plate code.
+
+##### Resolvers
+Generate a custom resolver function.
+
+```sh
+$ 8base generate resolver [FUNCTION_NAME] [OPTIONS]
+```
+
+OPTIONS:
+* `--mocks`, `-x`	Included mocks dir and files - type: boolean, default: true
+* `--syntax`, `-s`  Syntax for the generated file - type: string, default: 'ts', allowed: ['js', 'ts']
+
+EXAMPLE: 
+```sh
+$ 8base generate resolver myNewResolver --syntax='ts' --mocks=true
+
+=>
+Updated file 8base.yml
+Created file src/resolvers/myNewResolver/handler.ts
+Created file src/resolvers/myNewResolver/mocks/request.json
+Created file src/resolvers/myNewResolver/schema.graphql
+
+Boom! Your new myNewResolver function has been successfully generated. To add any required settings, check out its configuration block in your projects 8base.yml file.
+
+generate done. Time: 18 ms.
+```
+
+##### Webhooks
+Generate a custom webhook function.
+
+```sh
+$ 8base generate webhook [FUNCTION_NAME] [OPTIONS]
+```
+
+OPTIONS:
+* `--path`, `-p`    Path for the url (https:<endpoint>/<PATH>) - type: string
+* `--method`, `-m`  HTTP verb to invoke the function - type: string, allowed: ['POST', 'GET', 'DELETE', 'PUT']
+* `--mocks`, `-x`	Included mocks dir and files - type: boolean, default: true
+* `--syntax`, `-s`  Syntax for the generated file - type: string, default: 'ts', allowed: ['js', 'ts']
+
+EXAMPLE: 
+```sh
+$ 8base generate webhook myNewWebhook --method='GET' --path='friends/{id}' --syntax='ts' --mocks=true
+
+=>
+Updated file 8base.yml
+Created file src/webhooks/myNewWebhook/handler.ts
+Created file src/webhooks/myNewWebhook/mocks/request.json
+
+Boom! Your new myNewWebhook function has been successfully generated. To add any required settings, check out its configuration block in your projects 8base.yml file.
+
+generate done. Time: 12 ms.
+```
+
+##### Trigger
+Generate a custom trigger function.
+
+```sh
+$ 8base generate trigger [FUNCTION_NAME] [OPTIONS]
+```
+
+OPTIONS:
+* `--type`, `-t` 	   	The trigger type - type: string, allowed: ['before', 'after']
+* `--operation`, `-o`   Operation that invokes the trigger - type: string
+* `--mocks`, `-x`		Included mocks dir and files - type: boolean, default: true
+* `--syntax`, `-s`  	Syntax for the generated file - type: string, default: 'ts', allowed: ['js', 'ts']
+
+EXAMPLE:
+```sh
+$ 8base generate trigger myNewTrigger --operation='User.update' --type='after' --syntax='ts' --mocks=true
+
+=>
+Updated file 8base.yml
+Created file src/triggers/myNewTrigger/handler.ts
+Created file src/triggers/myNewTrigger/mocks/request.json
+
+Boom! Your new myNewTrigger function has been successfully generated. To add any required settings, check out its configuration block in your projects 8base.yml file.
+
+generate done. Time: 14 ms.
+```
+
+##### Task
+Generate a custom task function.
+
+```sh
+$ 8base generate task [FUNCTION_NAME] [OPTIONS]
+```
+
+OPTIONS:
+* `--schedule`, `--sch`  Schedule on which the task runs - type: string
+* `--mocks`, `-x`		Included mocks dir and files - type: boolean, default: true
+* `--syntax`, `-s`  	Syntax for the generated file - type: string, default: 'ts', allowed: ['js', 'ts']
+
+EXAMPLE:
+```sh
+$ 8base generate task myNewTask --schedule='rate(1 day)' --syntax='ts' --mocks=true
+
+=>
+Updated file 8base.yml
+Created file src/tasks/myNewTask/handler.ts
+Created file src/tasks/myNewTask/mocks/request.json
+
+Boom! Your new myNewTask function has been successfully generated. To add any required settings, check out its configuration block in your projects 8base.yml file.
+
+generate done. Time: 11 ms.
+```
+
+##### Mock
+Generate a mock for a custom function.
+
+```sh
+$ 8base generate mock [FUNCTION_NAME] [OPTIONS]
+```
+
+OPTIONS:
+* `--mockName`, `-m`    Name of the mock request - type: string, default: 'request'
+* `--syntax`, `-s`  	Syntax for the generated file - type: string, default: 'ts', allowed: ['js', 'ts']
+
+EXAMPLE:
+```sh
+# NOTE: The function name is the function your generating a mock for!
+$ 8base generate mock myNewResolver --mockName='success'
+
+=>
+Created file src/resolvers/myNewResolver/mocks/success.json
+
+Boom! Your new success request mock has been successfully generated.
+
+generate done. Time: 10 ms.
+```
+
+### Client Side
+Application generators can be used for building 'starter-app-like' skeletons in supported frameworks. Please note that this feature is highly experimental on our part!
+
+##### App
+Generate a starter app in a specified framework.
+
+```sh
+$ 8base generate app [PROJECT_NAME]
+```
+
+Currently, only ReactJs is supported and the application template can be found [here](https://github.com/8base/react-app-starter).
+
+##### Scaffold
+Scaffold client side resources for a given table resource.
+
+```sh
+$ 8base generate scaffold [TABLE_NAME] [OPTIONS]
+```
+
+OPTIONS:
+* `--depth`	Depth of the generated query - type: number, default: 1
+
+EXAMPLE:
+```sh
+# NOTE: The table name is in your workspace.
+$ 8base generate scaffold myTable --depth=1
+
+=>
+✔ Choose table fields › createdAt, field1, relationship1
+✔ Choose form fields › field1, relationship1
+
+src/routes/boards/BoardCreateDialog.js
+src/routes/boards/BoardEditDialog.js
+src/routes/boards/BoardDeleteDialog.js
+src/routes/boards/BoardsTable.js
+src/routes/boards/index.js
+src/Root.js
+
+Boards was successfully created
+
+generate done. Time: 30,186 ms.
+```
diff --git a/development-tools/dev-env/8base-yml.md b/development-tools/dev-env/8base-yml.md
new file mode 100644
index 0000000..fd6ef10
--- /dev/null
+++ b/development-tools/dev-env/8base-yml.md
@@ -0,0 +1,44 @@
+# 8base Config
+
+`8base.yml` is the main configuration file where you define how custom functions get exposed and called as well as the list of custom permissions that can restrict access to certain paths in your code.
+
+The file has two main sections:
+
+* `functions` - list and configure all your custom functions. Read more on how to configure functions [here](../../8base-console/custom-functions/README.md). 
+* `permissions` - list custom permissions that can be used in your code. More [here](../../8base-console/roles-and-permissions.md).
+
+### Example 8base.yml
+
+```yaml
+functions:
+  resolverExample:
+    handler:
+      code: src/resolverFunc.ts
+    type: resolver
+    schema: src/resolverFunc.graphql
+
+  triggerBefore:
+    handler:
+      code: src/triggerBefore.ts
+    type: trigger.before
+    operation: TableName.create
+
+  triggerAfter:
+    handler:
+      code: src/triggerAfter.ts
+    type: trigger.after
+    operation: TableName.create
+  
+  webhookExample:
+    handler:
+      code: src/webhookFunc.ts
+    type: webhook
+    path: webhook_url #optional, default: function name
+    method: POST
+    
+  taskExample:
+    handler:
+      code: src/taskFunc.ts
+    type: task
+    schedule: 'rate(1 minute)'
+```
diff --git a/development-tools/dev-env/README.md b/development-tools/dev-env/README.md
new file mode 100644
index 0000000..0c3a3d6
--- /dev/null
+++ b/development-tools/dev-env/README.md
@@ -0,0 +1,42 @@
+# Development Environment
+
+8base CLI provides a set of tools to assist with viewing remote logs as well as debugging functions locally.
+
+### Logs
+
+In order to view logs from remote function execution use:
+
+`8base logs [FUNCTION NAME]`.
+
+Optional parameters `-n` and `-t` allow you to specify number of lines returned as well as continuously stream logs in your terminal (tail). \
+
+### Invoke functions locally
+
+For testing purposes you can execute functions locally and supply a JSON value for the `event` parameter:
+
+`8base invoke-local [FUNCTION NAME] -j '{ "data": { "key1": "val1" }}'`.
+
+You can specify JSON inline using the `-j` option or a path to a file with JSON using `-p` option.
+
+_To test this feature, implement the `hello` resolver from_ [_Resolvers_](doc:resolvers) _and run the following command in your CLI._
+
+`8base invoke-local hello -j '{ "data": { "name": "Bob" } }'`
+
+{% hint style="info" %}
+##### Environment Variables
+
+If you'd like to set environment variables while running `invoke-local` there are a couple of options. You can either include variables directly in the command, such as:
+
+`VAR1=test 8base invoke-local hello\n`
+
+you can also create a `.env` file with variables and use it as follows:
+
+`env $(cat .env | xargs) 8base invoke-local hello`
+{% endhint %}
+
+
+### Invoke functions remotely
+
+Similarly to `invoke-local` you can execute functions remotely using:
+
+`8base invoke [FUNCTION NAME] -j '{ "data": { "key1": "val1" }}'`
diff --git a/development-tools/dev-env/project-structure.md b/development-tools/dev-env/project-structure.md
new file mode 100644
index 0000000..2ee8965
--- /dev/null
+++ b/development-tools/dev-env/project-structure.md
@@ -0,0 +1,16 @@
+# Project Structure
+
+A typical project structure looks like this:
+
+```text
+├── src/
+|   ├── function1.ts
+|   └── function2.js
+├── 8base.yml
+└── package.json
+```
+
+This is a regular Node.js project. You can add dependencies via `npm` or `yarn`. 8base CLI comes with Webpack and TypeScript pre-configured out of the box. This allows you to write code in JavaScript or TypeScript. `async/await` is also supported.
+
+`8base.yml` is used to configure custom functions and permissions. You can read more about it [here](https://github.com/8base/Documentation/tree/4df3b0cc7b342fe0d3468fbf0a5cafa597c6f037/docs/logic/8baseyml/README.md).
+
diff --git a/development-tools/dev-env/runtime_environment.md b/development-tools/dev-env/runtime_environment.md
new file mode 100644
index 0000000..e00f172
--- /dev/null
+++ b/development-tools/dev-env/runtime_environment.md
@@ -0,0 +1,79 @@
+# Environment
+
+## Function arguments
+Each function handler receives two arguments: `event` and `context`. The structure of the `event` object depends on the type of the function and is described in corresponding sections of the docs. The `context` object contains useful properties and methods that are described below.
+
+### Context object
+Functions have a second `context` argument passed to them that has the following properties:
+
+* `workspaceId` property holds the id of the current workspace.
+* `context.invokeFunction(taskName, args, options)` allows you to invoke other functions. You can read more about it [here](../../8base-console/custom-functions/README.md).
+* `context.api.gqlRequest(query, variables, options)` which provides a convenient way to interact with the 8base GraphQL API. When using the `api.gqlRequest` you don't have to worry about setting the URL or authentication header - this is done automatically. The query is executed under the authentication context of the user that made the request.
+
+### Using `gqlRequest` to call 8base API
+
+The `context.api.gqlRequest` method has the following signature: `gqlRequest(query, variables, options)`. In addition to a GraphQL query and variables you can pass the optional `options` argument that has two properties:
+
+* `authorization` allows you to override the authorization token. For example if you'd like to use an API token instead of the original user authorization token.
+* `checkPermissions` - setting it to `false` lets you execute a GraphQL operation with elevated permissions. This is useful when the logic inside of your function requires more permissions than the user making the request. You can think of it as equivalent to `sudo` in Linux.
+
+```javascript
+import gql from "graphql-tag";
+
+const query = gql`query customer($id: ID!) {
+  customer(id: $id) {
+    id
+    name
+  }
+}`;
+
+module.exports = async (event, context) => {
+  const { id } = event.data;
+  const { customer } = await context.api.gqlRequest(query, { id });
+}
+```
+
+### Environment variables
+You can set environment variables in 8base settings and they automatically get exposed in all functions through `process.env.VARIABLE_NAME`.
+
+![Setting environment variables in 8base settings](../../.gitbook/assets/8base-env-variables.png)
+
+### Timeouts
+Functions have maximum 20 seconds execution time. After the execution time limit is reached the execution times out and returns an error. Please let us know if you have a use case where you need more than 20 seconds continuous execution.
+
+### What happens after 'return'
+After your function returns its execution is immediately frozen. This means that if you have any asynchronous processes still running they will not be able to finish. There are several ways to deal with this:
+
+1. Use `await` to get a result from the asynchronous operation before returning from the function:
+
+```javascript
+module.exports = async (event, context) => {
+  const response = await context.api.gqlRequest(QUERY);
+  return {
+    data: JSON.stringify(response)
+  }
+}
+```
+
+2. Return a promise:
+
+```javascript
+module.exports = (event: any, context: any) => {
+  const promisedResult = new Promise((resolve, reject) => {
+    context.api.gqlRequest(QUERY).then((response) => {
+      resolve({
+        data: JSON.stringify(response)
+      });
+    });
+  });
+
+  return promisedResult;
+};
+```
+
+3. Spawn a background task that keeps running after your function returns. You can use the `context.invokeFunction` API ([described here](../../8base-console/custom-functions/tasks.md)).
+
+### Managing Dependencies
+You can add any dependencies using `npm` or `yarn`. When you run '8base deploy', 8base uploads your code to the cloud, runs `npm install` and deploys the bundle to AWS Lambda.
+
+It is recommended that you have a `package-lock.json` file to dramatically accelerate deployment. 8base checks whether `package-lock.json` has changed since the last deploy and only installs dependencies when necessary.
diff --git a/development-tools/sdk/README.md b/development-tools/sdk/README.md
new file mode 100644
index 0000000..2d7fb0f
--- /dev/null
+++ b/development-tools/sdk/README.md
@@ -0,0 +1,10 @@
+# Client Tools
+
+8base provides a set of client libraries that simplify building front-end applications on top of 8base platform:
+
+* [**SDK**](https://github.com/8base/sdk) comes with a set of libraries that simplify authentication, connecting to the API, client-side subscriptions, file uploads and more. SDK uses [ApolloClient](https://www.apollographql.com/docs/react/) for GraphQL requests and state management. It uses [Auth0](https://auth0.com/) for authentication.
+
+* [**Boost UI Kit**](https://github.com/8base/boost) provides a set of common UI components, such as form fields, tables, layout elements and a file upload widget. Some of the components are pre-wired with the 8base API to enable automatic client-side validation and other features.
+
+* [**Quickstart App**](../../getting-started/quick-start.md) can be used as a starter project to quickly learn how to build on 8base.
+
diff --git a/development-tools/sdk/api/subscriptions.md b/development-tools/sdk/api/subscriptions.md
new file mode 100644
index 0000000..a67584e
--- /dev/null
+++ b/development-tools/sdk/api/subscriptions.md
@@ -0,0 +1,104 @@
+Subscriptions let your client-side application receive server-side events from the 8base platform. This is useful when you are building real-time functionality such as chats or notifications. Subscriptions are automatically generated for every data table you create.
+
+Apollo Client provides a standard way to use subscriptions, but some additional configuration needs to be implemented in order to connect to the Websocket endpoint. However, if you are using [EightBaseAppProvider](https://github.com/8base/sdk/tree/master/packages/app-provider) from 8base open-source SDK it does all the configuration for you and you can start using subscriptions out of the box. 
+
+
+```javascript
+import gql from 'graphql-tag';
+import { Subscription } from 'react-apollo';
+
+const CHAT_MESSAGE_SUBSCRIPTION = gql`
+  subscription onChatMessageAdded($chatId: String!) {
+    ChatMessage(filter: {
+      mutation_in: [create],
+      node: {
+        chatId: {
+          equals: $chatId
+        }
+      }
+    }) {
+      node {
+        createdAt
+        createdBy {
+          firstName
+          lastName
+        }
+        text
+      }
+    }
+  }
+`;
+
+const NewChatMessage = ({ chatId }) => (
+  <Subscription
+    subscription={CHAT_MESSAGE_SUBSCRIPTION}
+    variables={{ chatId }}
+  >
+    {({ data: { ChatMessage }, loading }) => (
+      <div>New message: {!loading && ChatMessage.text}</div>
+    )}
+  </Subscription>
+);
+```
+```javascript
+function createApolloClient({ uri, token, workspaceId }: ICreateApolloClientOptions) {
+  const batchHttpLink = new BatchHttpLink({ uri });
+  const httpLink = new HttpLink({ uri });
+  const subscriptionLink = new SubscriptionLink({
+    uri: 'wss://ws.8base.com',
+    getAuthState: () => ({
+      token,
+      workspaceId,
+    }),
+    onAuthError: error => {
+      log('log', '[Subscription error]:', error);
+    },
+  });
+​
+  const onErrorLink = onError(({ graphQLErrors, networkError }) => {
+    if (graphQLErrors) {
+      graphQLErrors.map(({ message, locations, path }) =>
+        log(
+          'log',
+          `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,
+        ),
+      );
+    }
+​
+    if (networkError) {
+      log('log', '[Network error]:', networkError);
+    }
+  });
+​
+  const authLink = setContext((_, { headers }) => ({
+    headers: {
+      ...headers,
+      authorization: token ? `Bearer ${token}` : '',
+    },
+  }));
+​
+  const networkLink = split(
+    ({ query }) => {
+      const definition = getMainDefinition(query);
+​
+      return (
+        definition.kind === 'OperationDefinition' &&
+        definition.operation === 'subscription'
+      );
+    },
+    subscriptionLink,
+    split(
+      operation => operation.getContext().important === true,
+      httpLink,
+      batchHttpLink,
+    ),
+  );
+​
+  const cache = new InMemoryCache();
+​
+  return new ApolloClient({
+    link: ApolloLink.from([authLink, onErrorLink, networkLink]),
+    cache,
+  });
+}
+```
\ No newline at end of file
diff --git a/development-tools/sdk/auth/README.md b/development-tools/sdk/auth/README.md
new file mode 100644
index 0000000..5bff3b5
--- /dev/null
+++ b/development-tools/sdk/auth/README.md
@@ -0,0 +1,24 @@
+# User Authentication
+
+8base SDK provides an easy way to implement login in your client application. We use [Auth0](https://www.auth0.com) to login users and generate a JWT token that can be used to authenticate the API.
+
+8base SDK provides the `Auth` package that wraps and configures the Auth0 React library. You call `Auth.createClient` with `web_8base` strategy and pass `domain`, `clientID` and `redirectUri` as client options. Pass auth client to `AppProvider` from `@8base-react/app-provider`. The example below shows recommended configuration using the default Auth0 account.
+
+```javascript
+import { Auth } from '@8base/auth';
+// Use this Auth0 configuration if you want
+// to use the default 8base Auth0 account for authentication
+const AUTH_CLIENT_ID = 'qGHZVu5CxY5klivm28OPLjopvsYp0baD';
+const AUTH_DOMAIN = 'auth.8base.com';
+
+// Auth0 web client is initialized here
+const authClient = Auth.createClient({
+  strategy: 'web_8base',
+  subsbribable: true,
+}, {
+  domain: AUTH_DOMAIN,
+  clientId: AUTH_CLIENT_ID,
+  redirectUri: `${window.location.origin}/auth/callback`,
+  logoutRedirectUri: `${window.location.origin}/auth`
+});
+```
diff --git a/development-tools/sdk/auth/react-auth.md b/development-tools/sdk/auth/react-auth.md
new file mode 100644
index 0000000..64fa0d2
--- /dev/null
+++ b/development-tools/sdk/auth/react-auth.md
@@ -0,0 +1,253 @@
+## 8base React SDK Authentication
+
+8base React SDK provides an easy way to implement authentication (sign-up, sign-in, sign-out) in your React.js apps. It works by wrapping an application in an AppProvider HoC that interfaces with a specified authentication client (generally an 8Base Auth Client). Install the following dependencies to start using it:
+
+* **react-apollo** contains the bindings for Apollo Client with React.
+* **@reach/router** a lightweight UI router that supports A11y standards.
+* **8base-react-sdk** provides tools to use 8base with React.
+* **@8base/auth** provides auth and auth strategies modules.
+
+{% hint style="warning" %}
+##### Routing
+
+In our examples, we use `@reach/router` to handle the UI routing, but this is *optional*, you can use any react routing library you wish as long as you expose an url endpoint to handle the OAuth callback workflow (which is beyond the scope of this document).
+{% endhint %}
+
+```sh
+npm install -s 8base-react-sdk @8base/auth react-apollo @reach/router
+```
+
+To being, wrap the root element with `<AppProvider>`. An *uri* and *authClient* argument is required. Please refer to the example below. 
+
+```js
+/* react/apollo packages */
+import React from 'react';
+import { Auth } from '@8base/auth';
+import { AppProvider } from '8base-react-sdk';
+
+/* Root component */
+import App from './App';
+
+/* 8base Workspace API Endpoint */
+const URI = '<API_ENDPOINT>'
+
+/**
+ * All option values can be set and retreived from 
+ * the authentication profile settings in 8base.
+ *
+ * Don't forget set custom domains in the 
+ * authentication settings!
+ */
+const authClient = Auth.createClient({
+  strategy: 'web_8base',
+  subscribable: true,
+}, {
+  /* Authentication profile client ID  */
+  clientId: '<AUTH_CLIENT_ID>',
+  /* Authentication profile domain */
+  domain: '<AUTH_DOMAIN>',
+  /* Permitted callback url, make sure this is configured correctly on the 8base dashboard */
+  redirectUri: `${window.location.origin}/auth/callback`,
+  /* Permitted logout redirect url, make sure this is configured correctly on the 8base dashboard */
+  logoutRedirectUri: `${window.location.origin}/logout`
+});
+
+ReactDOM.render(
+	/**
+	 * On page load, AppProvider will either redirect the user to sign-in page. Or
+	 * render the App component.
+	 *
+	 * When using the router component, the updated function may look like this:
+	 *
+	 *	<AppProvider uri={URI} authClient={auth0WebClient}>
+	 *		{({ loading }) => loading ? <p>Please wait...</p> : <Routes />}
+	 *	</AppProvider>,
+	 * 
+	 */
+	<AppProvider uri={URI} authClient={authClient}>
+		{({ loading }) => {
+		  if (loading) {
+		    return <p>Please wait...</p>;
+		  }
+		  
+		  return <App />;
+		}}
+	</AppProvider>,
+	document.getElementById("root")
+);
+```
+
+### Login
+
+`8base-react-sdk` exports a HoC, `withAuth`, to inject authentication primitives into your custom components. One of the properties that are injected is `isAuthorized` which will inform you if the user is authorized (logged in). It can easily be used for dynamically rendering content based on user authentication state. Below, we use it to call `authClient.authorize()` which will trigger the "sign-in" or "sign-up" workflows from our authentication client, when a user is not logged in.
+
+{% hint style="warning" %}
+##### Common "Gotcha"
+
+Make sure you have configured your 8base application's authentication profile to assign a role to users, or they will not be able to make Graphql requests even if they are authenticated!
+{% endhint %}
+
+
+```js
+import React, { useEffect } from 'react';
+import { useQuery } from 'react-apollo';
+import { withAuth, gql } from '8base-react-sdk;
+
+/* GraphQL query for user information */
+const USER_INFO = gql`
+  query UserQuery {
+    user {
+      id
+    }
+  }
+`;
+
+/* Component generator function being passeda auth data */
+const Login = ({ auth: { isAuthorized, authClient } }) => {
+  useEffect(() => {
+    if (!isAuthorized) {
+      authClient.authorize();
+    }
+  }, [authClient]);
+
+  const { loading, data, error } = useQuery(USER_INFO);
+
+  if (loading) return <p>Loading...</p>;
+
+  if (error) {
+    console.log(error);
+
+    return <p>Error!</p>;
+  }
+
+  return <h1>{data.user.id}</h1>;
+};
+
+/* Decorate exported function using the withAuth HoC */
+export default withAuth(Login);
+
+```
+
+### Authentication Handler
+In this example, we are using `Router` from `@reach/router` to configure a routing mechanism to handle the "callback" step, which is apart of the OAuth workflow.
+
+```js
+import { Router } from '@reach/router';
+
+import App from './App'
+import AuthCallback from './authCallback';
+
+const Routes = () => (
+  <Router>
+    /* Path declaration for auth callback to render AuthCallback component  */
+    <AuthCallback path="/auth/callback" />
+    <App default />
+  </Router>
+);
+
+export default Routes;
+```
+
+#### OAuth Callback
+
+Generally, the `AuthCallback` component is up to the developer to define. In our example, when the component initializes one of two things can be expected; user sign-in or sign-up. The appropriate pathway can be determined by checking for an existing user with the provided user details. If the user doesn't exist, as indicated by a failed query for their ID, a new user record can be created in 8Base.
+
+```js
+import React, { useEffect } from 'react';
+import { navigate } from '@reach/router';
+import { withAuth, gql } from '8base-react-sdk;
+import { withApollo } from 'react-apollo';
+
+/* Query the for the ID of the logged in user */
+const CURRENT_USER = gql`
+  query currentUser {
+    user {
+      id
+    }
+  }
+`;
+
+/* Mutation for adding user with email */
+const SIGN_UP_USER = gql`
+  mutation userSignUp($user: UserCreateInput!) {
+    userSignUp(user: $user) {
+      id
+      email
+    }
+  }
+`;
+
+/* Authentication success callback function */
+const completeAuth = async (authClient, client) => {
+  /* Pull required values from authorized user data */
+  const { idToken, email } = await authClient.getAuthorizedData();
+
+  /* After succesfull signup store token in local storage */
+  await authClient.setState({ token: idToken });
+
+  /* Context for API calls */
+  const context = {
+    headers: {
+      authorization: `Bearer ${idToken}`
+    }
+  };
+
+  try {
+    /* Check if a user exists, if not an error will be thrown */
+    await client.query({ query: CURRENT_USER, context });
+  } catch {
+    /* Sign up user if the request errored */
+    await client.mutate({
+      mutation: SIGN_UP_USER,
+      variables: {
+        user: { email }
+      },
+      context
+    });
+  }
+};
+
+const AuthCallback = ({ auth: { authClient }, client }) => {
+  useEffect(() => {
+    /* Run authentication function */
+    completeAuth(authClient, client).then(() => {
+      /* Redirect back to home page */
+      navigate("/");
+    });
+  }, [authClient, client]);
+
+  return <p>Please wait...</p>;
+};
+
+/* Decorated export */
+export default withAuth(withApollo(AuthCallback));
+```
+
+{% hint style="warning" %}
+##### How to use the idToken
+
+`idToken` is a bearer token for authenticating requests to the GraphQL endpoint. Include it as a headers for non-public API calls - `Authorization: Bearer ${idToken}`. Generally, this is included in your requests to 8Base automatically by means of the `AppProvider` we set up in the beginning of this guide.
+{% endhint %}
+
+![Clicking the login button should redirect to this page](https://paper-attachments.dropbox.com/s_66210AD8E619DBF1B5FFC6F0A64CFE2655C6A0925870CE59A3939E2B8D1BDC31_1561354686037_Screenshot+2019-06-24+at+6.37.49+AM.png)
+
+### Logout
+
+Logging out is very easy using `withAuth`. Using `withAuth` simply calling `authClient.logout()` will log out your user. Make sure your auth client has logout method.
+
+{% hint style="warning" %}
+##### Common "Gotcha"
+
+Make sure you have configured your 8base application's supported logout urls to include the logout URL defined at the start. If you do not add the logout URL to your application's supported logout urls, you will be unable to log out users and logout's will land on a 8base error page (if you are using 8base Auth).
+{% endhint %}
+
+```js
+import React from 'react';
+import { withAuth } from '8base-react-sdk';
+
+const LogoutButton = ({ auth: { authClient } }) => (
+  <button onClick={() => authClient.logout()}>logout</button>
+);
+
+export default withAuth(LogoutButton);
+```
diff --git a/development-tools/sdk/file_upload.md b/development-tools/sdk/file_upload.md
new file mode 100644
index 0000000..4d6ce88
--- /dev/null
+++ b/development-tools/sdk/file_upload.md
@@ -0,0 +1,11 @@
+# Application File Uploads
+
+For React developers 8base provides an open source `@8base-react/file-input` package that wraps Filestack picker and makes it easy to include file uploading in your application. The file picker comes with ability to upload files from user's computer, a URL, Google Drive, Facebook, Dropbox and other sources as well cropping and rotating images. 
+
+![Filestack uploader for 8base SDK](../../.gitbook/assets/data-viewer-upload.png)
+
+You can find React usage examples here:
+
+* Single file upload: [https://codesandbox.io/s/q7rj0p600w](https://codesandbox.io/s/q7rj0p600w)
+* Multiple files upload: [https://codesandbox.io/s/5zvpxv0r44](https://codesandbox.io/s/5zvpxv0r44)
+
diff --git a/development-tools/sdk/filestack-uploader.md b/development-tools/sdk/filestack-uploader.md
new file mode 100644
index 0000000..aea053c
--- /dev/null
+++ b/development-tools/sdk/filestack-uploader.md
@@ -0,0 +1,143 @@
+# Filestack
+
+### File picker for React
+
+For React developers 8base SDK provides the `@8base-react/file-input` package that automates the steps described here. If you're looking for an easy way to integrate file uploading capabilities into your application read the [Client Tools](./file_upload.md) section.
+
+8base provides a native file management capability. You can attach files to your data object by creating a field of type `File`. A `File` field can store one or multiple files. You can manage granular files permissions just like you would for any other table.
+
+In the GraphQL API `Files` is just another table that supports all standard CRUD operations as well as connections to other tables. When you create a field of type `File` the platform creates a relationship (connection) between your table and the `Files` table under the hood. This allows you to use connection-related operations such as `create`, `connect`, `disconnect` on file-type fields.
+
+8base is natively integrated with [Filestack](https://www.filestack.com/) to handle file uploads, delivery and transformations. Filestack provides file `handle`, which is a unique identifier of the file inside Filestack. You provide Filestack `handle` when creating a `File` object in 8base.
+
+The workflow of creating a file consists of the following steps:
+
+1. **Get Filestack upload details**
+
+   You can use the `fileUploadInfo` query to get all fields required by Filestack to upload a file. It generates a temporary policy allowing you to upload a file to a predefined path, based on your workspace ID.
+
+```javascript
+{
+  fileUploadInfo {
+    policy
+    signature
+    apiKey
+    path
+  }
+}
+```
+
+2. **Upload file to Filestack** Use Filestack API or picker to upload the file using the parameters from the step 1. On successful upload Filestack returns file `handle`. You can learn more about uploading files directly to Filestack [here](https://www.filestack.com/docs/concepts/uploading/). For React developers using the 8base SDK, it provides [tools](./file_upload.md) to simplify file uploads such that you never need to interact with Filestack directly.
+
+3. **Create file in 8base** Create file in 8base by passing the Filestack `handle` from step 2. You can either create a `File` object directly so you can later connect it to other tables:
+
+```javascript
+mutation {
+  fileCreate(data: {
+    fileId: "<FILE_ID>" # Filestack handle here
+    filename: "<FILE_ID>"
+  }) {
+    id
+  }
+}
+```
+
+ or you can create and connect file at the same time:
+
+```javascript
+mutation {
+  customerCreate(data: {
+    picture: {
+      create: {
+        fileId: "<FILE_ID>" # Filestack handle here
+        filename: "<FILE_ID>"
+      }
+    }
+  }) {
+    id
+  }
+}
+```
+
+### Filestack API
+
+Filestack has API clients, Pickers and Framework integrations that make it easy to upload your files using a variety of different languages and frameworks. See the full list [here](https://www.filestack.com/docs/api/#api-clients). You will need to use the [security credentials](../../8base-console/roles-and-permissions.md) from the 8base GraphQL API to upload files to Filestack. This is how to upload a file to the API using a basic `CURL` request:
+
+```sh
+curl -X POST \
+     --data-binary @FILE_NAME_HERE \
+     --header "Content-Type:MIME_TYPE_HERE" "https://www.filestackapi.com/api/store/S3?key=YOUR_API_KEY_HERE&policy=YOUR_POLICY_HERE&signature=YOUR_SIGNATURE_HERE&path=YOUR_PATH_HERE"
+```
+
+The success response should look similar to this:
+
+```json
+{
+  "container": "8base-user-uploads-t2w73r32mzob09ve",
+  "url": "https://cdn.filestackcontent.com/VJaeYGhMSJ2FJJnvSPx9",
+  "filename": "temp.png",
+  "key": "production/cjnl1ykw1000601p65lhyxdno/cjrnmwgrd006p01pdt5zoejze/mBKjQeQ5RriwpSXhsDCv_temp.png",
+  "type": "image/png",
+  "size": 139976
+}
+```
+
+In this case, your handle will be `VJaeYGhMSJ2FJJnvSPx9`, the last portion of `"url"`.
+
+### React Native Support
+Filestack does not have an SDK for React Native. See below for how to implement file uploads in React Native using the `fetch()` API and the `ImagePicker` API from Expo.
+
+```javascript
+const handlePost = async () => {
+  const body = new FormData()
+
+  // files are required to be sent as multipart form data to Filestack api
+  body.append("fileUpload", {
+    name: "test",
+    uri: `${this.state.file.replace("file://", "")}`
+  })
+
+  const {fileUploadInfo} = this.props.data
+  const endoint = [
+    `https://www.filestackapi.com/api/store/S3`,
+    `?key=${fileUploadInfo.apiKey}`,
+    `&policy=${fileUploadInfo.policy}`,
+    `&signature=${fileUploadInfo.signature}`,
+    `&path=${fileUploadInfo.path}`
+  ].join('')
+
+  try {
+    const response = await fetch(endoint, {
+      method: 'POST',
+      body: body
+    })
+
+    const responseJson = await response.json()
+
+    this.setState({
+      handle: responseJson.url.slice(33)
+    })
+  } catch (e) {
+    console.log("error", e)
+  }
+}
+
+// (...)
+
+const _pickImage = async () => {
+  // Allow application access to Camera Roll
+  const { status } = await Permissions.askAsync(Permissions.CAMERA_ROLL);
+
+  // (...)
+
+  //The ImagePicker API from expo returns a URI, which we will use to access the file object to upload to Filestack.
+  let result = await ImagePicker.launchImageLibraryAsync({
+    allowsEditing: true,
+    aspect: [4, 3]
+  });
+
+  if (!result.cancelled) {
+    this.setState({ file: result.uri });
+  }
+}
+```
diff --git a/development-tools/sdk/vs_code_plugin.md b/development-tools/sdk/vs_code_plugin.md
new file mode 100644
index 0000000..5f1c9e9
--- /dev/null
+++ b/development-tools/sdk/vs_code_plugin.md
@@ -0,0 +1,19 @@
+# VS Code Plugin
+
+For VS Code users we recommend installing the [Apollo GraphQL extension](https://marketplace.visualstudio.com/items?itemName=apollographql.vscode-apollo). It significantly improve the development experience by providing schema-based GraphQL autocompletion, query validation, syntax highlighting and more.
+
+Once you installed the plugin create file `apollo.config.js` in the root of the project: 
+
+```javascript
+module.exports = {
+  client: {
+    service: {
+      name: '8base',
+      url: 'https://8BASE_API_URL',
+    },
+    includes: [
+      "src/**/*.{ts,tsx,js,jsx}"
+    ]
+  },
+};
+```
\ No newline at end of file
diff --git a/getting-started/connecting-to-api.md b/getting-started/connecting-to-api.md
new file mode 100644
index 0000000..cf7333f
--- /dev/null
+++ b/getting-started/connecting-to-api.md
@@ -0,0 +1,206 @@
+# Connecting to the API
+
+8base provisions all database tables with over one-dozen built-in GraphQL schemas. These resources allow you to perform any Create, Read, Update and Delete \(CRUD\) action needed to effectively manage your data. Additionally, it doesn't matter what technology you're using for a client - or server - application. As long as you can perform web requests, you'll be able to connect to your 8base workspace endpoints.
+
+{% youtube src="https://www.youtube.com/watch?v=gLM-Fc6gWlE" %}{% endyoutube %}
+
+### Setup
+
+In the following examples, we've made a few assumptions \(feel free to re-create them for your learnings sake!\). Those assumptions are the following:
+
+1. You manage a workspace named _Todo's Workspace_
+2. You've defined a table named _Todos_
+3. The _Todos_ table has the following fields:
+   * `text: text`
+   * `completed: switch, { format: Yes/No }`
+4. One or more _Todos_ records have been created
+5. Guest users are permitted CRUD access on the _Todos_ table
+6. An API token has been created for a role named _Developer_.
+
+### Executing API Calls
+
+In all of the following examples, make sure to replace all occurances of `{API_ENDPOINT}` with your workspace's endpoint and all occurances of `{API_TOKEN}` with your developer API token.
+
+#### Example GraphQL Query
+
+{% code-tabs %}
+{% code-tabs-item title="Bash" %}
+```bash
+curl -X POST {API_ENDPOINT} \
+     -H "Content-Type: application/json"  \
+     -d '{ "query": "{ todosList { items { text } } }" }'
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="JavaScript" %}
+```javascript
+// 'graphql-request' or other GraphQL library is required
+const { request } = require('graphql-request')
+const ENDPOINT = `{API_ENDPOINT}`
+
+const GET_TODOS = `
+query {
+  todosList {
+    items {
+      text
+    }
+  }
+}
+`
+
+request(ENDPOINT, GET_TODOS).then((r) => console.log(r.todosList.items))
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Python" %}
+```python
+# `graphqlclient` or other GraphQL library is required
+from graphqlclient import GraphQLClient
+
+client = GraphQLClient('{API_ENDPOINT}')
+
+result = client.execute('''
+query {
+  todosList {
+    items {
+      text
+    }
+  }
+}
+''')
+
+print(result)
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+#### Example GraphQL Mutation
+
+{% code-tabs %}
+{% code-tabs-item title="Bash" %}
+```bash
+curl -X POST {API_ENDPOINT} \
+     -H "Content-Type: application/json" \
+     -d '{ "query": "mutation TodoCreate { todoCreate(data: {text: \"from CURL\", completed: false}) {id text completed}}"}'
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="JavaScript" %}
+```javascript
+// 'graphql-request' or other GraphQL library is required
+const { request } = require('graphql-request')
+const ENDPOINT = `{API_ENDPOINT}`
+
+const MAKE_TODO = `
+  mutation TodoCreate {
+    todoCreate(
+      data: {
+        text: "from node",
+        completed: false
+    }) {
+      id
+      text
+      completed
+    }
+  }
+`
+request(ENDPOINT, MAKE_TODO).then((r) => console.log(r))
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Python" %}
+```python
+# `graphqlclient` or other GraphQL library is required
+from graphqlclient import GraphQLClient
+
+client = GraphQLClient('{API_ENDPOINT}')
+
+result = client.execute('''
+mutation TodoCreate {
+  todoCreate(
+    data: {
+      text: "from node",
+      completed: false
+  }) {
+    id
+    text
+    completed
+  }
+}
+''')
+
+print(result)
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
+
+#### Example GraphQL Mutation with Authentication
+
+{% code-tabs %}
+{% code-tabs-item title="Bash" %}
+```bash
+curl -X POST {API_ENDPOINT}\
+     -H "Content-Type: application/json" \
+     -H 'Authorization: Bearer {API_TOKEN}' \
+     -d '{ "query": "mutation TodoCreate { todoCreate(data: {text: \"from CURL with auth\", completed: false}) {id text completed}} "}'
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="JavaScript" %}
+```javascript
+// 'graphql-request' or other GraphQL library is required
+const { request, GraphQLClient } = require('graphql-request')
+const ENDPOINT = `{API_ENDPOINT}`
+
+const MAKE_TODO = `
+  mutation TodoCreate {
+    todoCreate(
+      data: {
+        text: "from node",
+        completed: false
+    }) {
+      id
+      text
+      completed
+    }
+  }
+`
+
+// create a new instance of GraphQLClient in order to add an authorization header
+const client = new GraphQLClient(ENDPOINT, {
+  headers: {
+    Authorization: 'Bearer {API_TOKEN}',
+  },
+})
+
+// update the request function so it runs in the context of client
+client.request(MAKE_TODO).then((r) => console.log(r))
+```
+{% endcode-tabs-item %}
+
+{% code-tabs-item title="Python" %}
+```python
+# `graphqlclient` or other GraphQL library is required
+from graphqlclient import GraphQLClient
+
+client = GraphQLClient('{API_ENDPOINT}')
+client.inject_token('Authorization','Bearer %s' % API_TOKEN)
+
+result = client.execute('''
+mutation TodoCreate {
+  todoCreate(
+    data: {
+      text: "from node",
+      completed: false
+  }) {
+    id
+    text
+    completed
+  }
+}
+''')
+
+print(result)
+```
+{% endcode-tabs-item %}
+{% endcode-tabs %}
diff --git a/getting-started/getting-started.md b/getting-started/getting-started.md
new file mode 100644
index 0000000..89a9ec8
--- /dev/null
+++ b/getting-started/getting-started.md
@@ -0,0 +1,23 @@
+# Overview
+
+**8base** is a GraphQL backend that lets front-end developers quickly deliver enterprise applications using full-stack JavaScript. Learn more about **8base's** awesome features on [our homepage](https://8base.com) or in [the quick start app](./quick-start.md).
+
+## Useful Guides
+
+> [**Quick Start**](./quick-start.md)  
+> Learn 8base by building a React application.	
+>
+> [**Management Console**](../8base-console/README.md)  
+> Read the high-level overview of 8base's management console.	
+>
+> [**Connect to your API**](./connecting-to-api.md)  
+> Explore ways to connect to the 8base GraphQL API.	
+>
+> [**GraphQL API**](../8base-console/graphql-api/README.md)  
+> Dive deeper into API concepts like authentication, queries, mutations, subscriptions and files.	
+>
+> [**Custom Functions**](../8base-console/custom-functions/README.md)  
+> Learn how to deploy back-end functions in JavaScript/TypeScript using 8base CLI.	
+>
+> [**Client Tools**](../development-tools/sdk/README.md)  
+> Accelerate front-end development with the 8base SDK and Boost UI Kit.	
diff --git a/getting-started/quick-start.md b/getting-started/quick-start.md
new file mode 100644
index 0000000..7444dbd
--- /dev/null
+++ b/getting-started/quick-start.md
@@ -0,0 +1,207 @@
+# Quick Start
+
+An easy way to get familiar with 8base is to go through the steps to download, install, and run a demo application. To make this process easy, we've created [a simple React app](https://github.com/8base/app-example) for you. It will help demonstrate some important concepts of 8base.
+
+For context, the demo app is a nifty little real estate platform. It allows users to manage Brokers, Customers, Listings, and Properties, and provides a convenient "Share Listing" via email capability.
+
+So... let's get to it!
+
+## 1. Create an 8base Account
+
+The first thing you'll need to do is create an 8base account. To get started, click [this link to signup](https://app.8base.com/auth/signup). If you use an email and password to create your account, we'll send you a confirmation email. Either way, once your account is confirmed 8base will redirect you to your default workspace.
+
+![8base Signup](../.gitbook/assets/signup-screen%20%281%29.png)
+
+Voila! You've officially signed up for 8base :\)
+
+## 2. Visit your Workspace
+
+In 8base, workspaces are treated like an individual project. - just like you probably have different Git repositories for different code bases. This allows you to easily stay organized with projects, as well as upgrade individual workspaces when your app or service begins to scale! Each workspace starts on a [30-day Free Trial](https://www.8base.com/pricing).
+
+Let's just use the default workspace for the rest of this demo.
+
+_Optional: If you want to create a new workspace, click the "YOUR NAME's Workspace" dropdown at the top of your screen and select "+ New Workspace". Name it whatever you like before pressing create. The new workspace should load in less then 10-seconds._
+
+![Create a Workspace](../.gitbook/assets/workspace-menu%20%281%29.png)
+
+## 3. Install the 8base CLI
+
+Open up your Terminal of choice. To harness the full power of 8base, you'll need to have [Node.js](https://nodejs.org/) installed on your computer. Without it, you won't be able to install our handy [8base NPM package](https://www.npmjs.com/package/8base).
+
+Assuming you're all set up and able to run `npm` commands, let's go ahead and install the 8base CLI.
+
+```text
+# Install 8base globally
+npm install -g 8base-cli
+```
+
+## 4. Clone the Demo App
+
+8base gives you full freedom to use whatever front-end technologies you'd like! For this example though, we've built a simple demo app to expedite your learning. Try cloning it to you computer with the following commands.
+
+```text
+# Clone the app from GutHub
+git clone https://github.com/8base/app-example.git
+
+# Change into the app directory
+cd app-example
+```
+
+## 5. Import and Deploy the Schema, Data and Backend Logic
+
+As you may know by now, 8base gives developers a Serverless + GraphQL backend that's ready to rock'n roll from the get go. It's quick and convenient to update tables, fields, model relationships, and much more in the [8base console](https://app.8base.com/). Let's simply bootstrap our demo app with some definitions and data we've already prepared for you.
+
+```text
+# Change into the app-example/server directory
+cd server
+
+# Install required dependencies
+npm install
+```
+
+Using the 8base CLI you'll be able to authenticate your development workspace, allowing you to communicate with 8base for deploys, function invocations, logs, and more. Try running the following and allow your browser to launch a new window \(you may have to login\). If you have multiple workspaces set up already, the CLI will prompt you to select one. Also, make sure to note the API endpoint URL displayed after login - you will need it later.
+
+```text
+# Login with CLI.
+8base login
+```
+
+![Logged in with 8base CLI](../.gitbook/assets/cli-login-success.png)
+
+Now we're going to run the import using a `DEMO.json` file found in the `app-example/server` directory. Just so you know, this can take a minute.
+
+```text
+# Import data schema and sample data
+8base import -f DEMO.json
+```
+
+Once the import is done... woohoo! You're ready to deploy using our handy `deploy` command. Once the deploy is finished, checkout the [Data Viewer](https://app.8base.com/data/) in your workspace. There should be brand new database tables filled with rows of data there waiting for you.
+
+```text
+# Deploy backend logic
+8base deploy
+```
+
+![8base data viewer inside of workspace](../.gitbook/assets/demo-data-viewer.png)
+
+## 6. Fire-up the App
+
+Let's get this show on the road. To start up the app let's first change into the `app-example/client` directory. Just like before in `app-example/server` we'll first want to install all our dependencies here. Once that's handeled though, try running the following start command - the app may take a minute or two to build.
+
+### For Mac Users
+
+```text
+# Change to client directory
+cd ../client
+
+# Install dependencies
+npm install
+
+# Swap placeholder with API URL and run start command
+REACT_APP_8BASE_API_ENDPOINT=<YOUR_API_URL_GOES_HERE> npm start
+```
+
+![8base Demo Application Properties page](../.gitbook/assets/demo-app-properties%20%281%29.png)
+
+### For Windows Users
+
+If you're developing with 8base on a Windows machine, there are a few extra steps to take for everything to run smoothly.
+
+1. In `app-example/client/package.json`, update the `react-scripts: '3.0.0'` dependency to be `react-scripts@2.1.8`
+2. Install `npm install react-scripts@2.1.8` from your terminal
+3. Install `npm install -g cross-env` from your terminal
+4. Update `app-example/client/package.json` to only contain the following:
+   * ```text
+     {
+      "parser": "babel-eslint",
+     }
+     ```
+5. Run `cross-env REACT_APP_8BASE_API_ENDPOINT=<YOUR_API_URL_GOES_HERE> npm start` to start the app
+
+## What Just Happened?
+
+You can now login and logout of the demo app using your username and password. It's done! While you may have followed a few steps at this point, you probably haven't learned much about 8base. So, lets dive in and understand the fruits of our labor.
+
+### 8base.yml
+
+If the `app-example` is not already open in your favorite text editor, open it now and navigate to the `app-example/server` directory. Inside, you'll find three really important files. They are the files marked with an astrix \(\*\) in the following print-out:
+
+```text
+server/
+├── node_modules/
+├── src/
+│   ├── mailer/
+│   └── mutations/
+│       └── listingShare/
+│           ├── handler.js*
+│           └── schema.graphql*
+├── 8base.yml*
+├── DEMO.json
+├── package-lock.json
+└── package.json
+```
+
+By running the `8base deploy` command, you deployed a custom function to the serverless cloud. There are many custom function types you can deploy on 8base, all of which must be configured in the `8base.yml` file located at the root of your project. By looking at that file now, we can see a functions declaration containing a `listingShare` object that has three important keys - _handler_, _type_, and _schema_.
+
+```yaml
+functions:
+  listingShare:
+    handler:
+      code: src/mutations/listingShare/handler.js
+    type: resolver
+    schema: src/mutations/listingShare/schema.graphql
+```
+
+In this quickstart, we'll skip the different function types. Just know that your `8base.yml` file is the master config file of your serverless application. In it we must declare any path to our functions and their supporting files. In the case of this `resolver` function, we've effectively extended the GraphQL API with a new Mutation that handles the "Share Listing" feature we mentioned earlier. Take a moment to check out the `handler.js` and `schema.graphql` files in `src/mutations/listingShare`. All the magic happens there :\)
+
+### 8base Data Viewer
+
+Your workspace was provisioned with four custom database tables upon importing the `DEMO.json` file - each with a dozen or more rows of data. The most popular way to accomplish this from scratch is by using the [Data Viewer](https://app.8base.com/data/). Navigate there now, and you'll see how easy it is to create, update, and delete your table schemas, as well as view the data they contain by switching over to the **Data** tab.
+
+Just for fun, lets add an _Address_ field to your **Properties** table.
+
+1. Click on **Properties**
+2. Type "Address" into the _Add New Field_ input
+3. Select "Smart" from the "Select Data Type" dropdown
+4. Once the field form opens up, select "Address" as the format
+5. Create the field
+
+![Creating fields in 8base](../.gitbook/assets/add-field%20%281%29.png)
+
+As simple as that, your _Properties_ table can now save addresses.
+
+What's very important to know is that 8base creates all basic, and some advanced, GraphQL _queries_, _mutations_, and _subscriptions_ auto-magically for every table you define. What does this mean? You'll never again have to write another Create, Read, Update, or Delete \(CRUD\) resource / endpoint!
+
+Don't believe me? Check out the next section.
+
+### API Explorer
+
+As promised, all of your CRUD actions are right here and ready to go. Let's prove it - as well as see all the GraphQL access that your applications now have access to.
+
+Navigate to the [8base API Explorer](https://app.8base.com/api-explorer). This is essentially your API playground, where you can quickly develop and execute powerful GraphQL commands. Copy over the following command once the API explorer is loaded.
+
+> Always be careful! The API explorer makes use of your live production data.
+
+```javascript
+query {
+  propertiesList(first: 10) {
+    items {
+      title
+      description
+      pictures {
+        count
+      }
+    }
+  }
+}
+```
+
+Run the query by pressing the large _play_ button (or press Cmd/Ctrl+Enter). Your requested _Properties_ list will pop up in a blink! Only sharing with you the requested data of _title_, _description_, and _pictures\[count\]_.
+
+![Running queries in API Explorer](../.gitbook/assets/data-query%20%281%29.png)
+
+There's so much more you can do in the API Explorer, with many ways to learn about GraphQL and your data, so we suggest taking some time to experiment.
+
+## Conclusion
+
+We hope this guide helps you better understand how 8base works. Feel free to modify the data schema in your workspace, add new tables, deploy custom logic, and develop amazing applications using 8base.
diff --git a/logic/functions/README.md b/logic/functions/README.md
new file mode 100644
index 0000000..f77d6b3
--- /dev/null
+++ b/logic/functions/README.md
@@ -0,0 +1 @@
+This is what's important in this directory.
\ No newline at end of file
diff --git a/logic/invoke-local-example.md b/logic/invoke-local-example.md
new file mode 100644
index 0000000..a5b7aaf
--- /dev/null
+++ b/logic/invoke-local-example.md
@@ -0,0 +1,36 @@
+Here we have defined a simple "Hello World" resolver to be added to the 8base GraphQL API.
+[block:code]
+{
+  "codes": [
+    {
+      "code": "functions:\n  hello:\n    handler:\n      code: src/hello.js\n    type: resolver\n    schema: src/hello.graphql",
+      "language": "yaml",
+      "name": "8base.yml"
+    },
+    {
+      "code": "type HelloResult {\n  result: String!\n}\n\nextend type Mutation {\n  hello(name: String): HelloResult\n}\n\n# Alternatively:\n# extend type Query {\n#   hello(name: String): HelloResult\n# }",
+      "language": "text",
+      "name": "hello.graphql"
+    },
+    {
+      "code": "module.exports = event => {\n  const name = event.data.name;\n  \n  return {\n    data: {\n      result: `Hello ${name}!`\n    }    \n  }\n};",
+      "language": "javascript",
+      "name": "hello.js"
+    }
+  ]
+}
+[/block]
+Call this function via the CLI using the following syntax:
+
+`8base invoke-local hello -j '{ "data": { "name": "Bob" } }'`
+
+The response should look like this:
+
+```
+Result:
+{
+  "data": {
+    "result": "Hello Bob!"
+  }
+}
+```
\ No newline at end of file
diff --git a/logic/troubleshooting.md b/logic/troubleshooting.md
new file mode 100644
index 0000000..4513b39
--- /dev/null
+++ b/logic/troubleshooting.md
@@ -0,0 +1,5 @@
+## Error: Cannot find module 'graphql/language/parser'
+Install `graphql` package: `npm install graphql` and deploy your project again.
+
+## Asynchronous operation works when running function locally, but not when deployed
+This is due to the fact that the execution environment freezes immediately after your function returns. [Learn more](doc:context#section-what-happens-after-return).
\ No newline at end of file
diff --git a/package-lock.json b/package-lock.json
new file mode 100644
index 0000000..c95d68b
--- /dev/null
+++ b/package-lock.json
@@ -0,0 +1,934 @@
+{
+  "name": "docs",
+  "version": "1.0.0",
+  "lockfileVersion": 1,
+  "requires": true,
+  "dependencies": {
+    "@babel/runtime": {
+      "version": "7.6.0",
+      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.6.0.tgz",
+      "integrity": "sha512-89eSBLJsxNxOERC0Op4vd+0Bqm6wRMqMbFtV3i0/fbaWw/mJ8Q3eBvgX0G4SyrOOLCtbu98HspF8o09MRT+KzQ==",
+      "dev": true,
+      "requires": {
+        "regenerator-runtime": "^0.13.2"
+      }
+    },
+    "ajv": {
+      "version": "6.10.2",
+      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.10.2.tgz",
+      "integrity": "sha512-TXtUUEYHuaTEbLZWIKUr5pmBuhDLy+8KYtPYdcV8qC+pOZL+NKqYwvWSRrVXHn+ZmRRAu8vJTAznH7Oag6RVRw==",
+      "dev": true,
+      "requires": {
+        "fast-deep-equal": "^2.0.1",
+        "fast-json-stable-stringify": "^2.0.0",
+        "json-schema-traverse": "^0.4.1",
+        "uri-js": "^4.2.2"
+      }
+    },
+    "all-contributors-cli": {
+      "version": "6.9.1",
+      "resolved": "https://registry.npmjs.org/all-contributors-cli/-/all-contributors-cli-6.9.1.tgz",
+      "integrity": "sha512-z0I/u78s1Robx2p57X28gg+ZHgtRe7iABmEw1O/UFRDpqAHvlF3P7rmug0d99nsNIehrOSayO6XQey4bOHe4Iw==",
+      "dev": true,
+      "requires": {
+        "@babel/runtime": "^7.2.0",
+        "async": "^3.0.1",
+        "chalk": "^2.3.0",
+        "didyoumean": "^1.2.1",
+        "inquirer": "^6.2.1",
+        "json-fixer": "^1.3.1-0",
+        "lodash": "^4.11.2",
+        "pify": "^4.0.1",
+        "request": "^2.72.0",
+        "yargs": "^14.0.0"
+      }
+    },
+    "ansi-escapes": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-3.2.0.tgz",
+      "integrity": "sha512-cBhpre4ma+U0T1oM5fXg7Dy1Jw7zzwv7lt/GoCpr+hDQJoYnKVPLL4dCvSEFMmQurOQvSrwT7SL/DAlhBI97RQ==",
+      "dev": true
+    },
+    "ansi-regex": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.0.tgz",
+      "integrity": "sha1-7QMXwyIGT3lGbAKWa922Bas32Zg=",
+      "dev": true
+    },
+    "ansi-styles": {
+      "version": "3.2.1",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
+      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
+      "dev": true,
+      "requires": {
+        "color-convert": "^1.9.0"
+      }
+    },
+    "asn1": {
+      "version": "0.2.4",
+      "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.4.tgz",
+      "integrity": "sha512-jxwzQpLQjSmWXgwaCZE9Nz+glAG01yF1QnWgbhGwHI5A6FRIEY6IVqtHhIepHqI7/kyEyQEagBC5mBEFlIYvdg==",
+      "dev": true,
+      "requires": {
+        "safer-buffer": "~2.1.0"
+      }
+    },
+    "assert-plus": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
+      "integrity": "sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=",
+      "dev": true
+    },
+    "async": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/async/-/async-3.1.0.tgz",
+      "integrity": "sha512-4vx/aaY6j/j3Lw3fbCHNWP0pPaTCew3F6F3hYyl/tHs/ndmV1q7NW9T5yuJ2XAGwdQrP+6Wu20x06U4APo/iQQ==",
+      "dev": true
+    },
+    "asynckit": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
+      "integrity": "sha1-x57Zf380y48robyXkLzDZkdLS3k=",
+      "dev": true
+    },
+    "aws-sign2": {
+      "version": "0.7.0",
+      "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz",
+      "integrity": "sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg=",
+      "dev": true
+    },
+    "aws4": {
+      "version": "1.8.0",
+      "resolved": "https://registry.npmjs.org/aws4/-/aws4-1.8.0.tgz",
+      "integrity": "sha512-ReZxvNHIOv88FlT7rxcXIIC0fPt4KZqZbOlivyWtXLt8ESx84zd3kMC6iK5jVeS2qt+g7ftS7ye4fi06X5rtRQ==",
+      "dev": true
+    },
+    "bcrypt-pbkdf": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz",
+      "integrity": "sha1-pDAdOJtqQ/m2f/PKEaP2Y342Dp4=",
+      "dev": true,
+      "requires": {
+        "tweetnacl": "^0.14.3"
+      }
+    },
+    "camelcase": {
+      "version": "5.3.1",
+      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
+      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
+      "dev": true
+    },
+    "caseless": {
+      "version": "0.12.0",
+      "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz",
+      "integrity": "sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw=",
+      "dev": true
+    },
+    "chalk": {
+      "version": "2.4.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
+      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
+      "dev": true,
+      "requires": {
+        "ansi-styles": "^3.2.1",
+        "escape-string-regexp": "^1.0.5",
+        "supports-color": "^5.3.0"
+      }
+    },
+    "chardet": {
+      "version": "0.7.0",
+      "resolved": "https://registry.npmjs.org/chardet/-/chardet-0.7.0.tgz",
+      "integrity": "sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA==",
+      "dev": true
+    },
+    "cli-cursor": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/cli-cursor/-/cli-cursor-2.1.0.tgz",
+      "integrity": "sha1-s12sN2R5+sw+lHR9QdDQ9SOP/LU=",
+      "dev": true,
+      "requires": {
+        "restore-cursor": "^2.0.0"
+      }
+    },
+    "cli-width": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/cli-width/-/cli-width-2.2.0.tgz",
+      "integrity": "sha1-/xnt6Kml5XkyQUewwR8PvLq+1jk=",
+      "dev": true
+    },
+    "cliui": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/cliui/-/cliui-5.0.0.tgz",
+      "integrity": "sha512-PYeGSEmmHM6zvoef2w8TPzlrnNpXIjTipYK780YswmIP9vjxmd6Y2a3CB2Ks6/AU8NHjZugXvo8w3oWM2qnwXA==",
+      "dev": true,
+      "requires": {
+        "string-width": "^3.1.0",
+        "strip-ansi": "^5.2.0",
+        "wrap-ansi": "^5.1.0"
+      },
+      "dependencies": {
+        "string-width": {
+          "version": "3.1.0",
+          "resolved": "https://registry.npmjs.org/string-width/-/string-width-3.1.0.tgz",
+          "integrity": "sha512-vafcv6KjVZKSgz06oM/H6GDBrAtz8vdhQakGjFIvNrHA6y3HCF1CInLy+QLq8dTJPQ1b+KDUqDFctkdRW44e1w==",
+          "dev": true,
+          "requires": {
+            "emoji-regex": "^7.0.1",
+            "is-fullwidth-code-point": "^2.0.0",
+            "strip-ansi": "^5.1.0"
+          }
+        }
+      }
+    },
+    "color-convert": {
+      "version": "1.9.3",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
+      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
+      "dev": true,
+      "requires": {
+        "color-name": "1.1.3"
+      }
+    },
+    "color-name": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
+      "integrity": "sha1-p9BVi9icQveV3UIyj3QIMcpTvCU=",
+      "dev": true
+    },
+    "combined-stream": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
+      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
+      "dev": true,
+      "requires": {
+        "delayed-stream": "~1.0.0"
+      }
+    },
+    "core-util-is": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
+      "integrity": "sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=",
+      "dev": true
+    },
+    "dashdash": {
+      "version": "1.14.1",
+      "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
+      "integrity": "sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA=",
+      "dev": true,
+      "requires": {
+        "assert-plus": "^1.0.0"
+      }
+    },
+    "decamelize": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/decamelize/-/decamelize-1.2.0.tgz",
+      "integrity": "sha1-9lNNFRSCabIDUue+4m9QH5oZEpA=",
+      "dev": true
+    },
+    "delayed-stream": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
+      "integrity": "sha1-3zrhmayt+31ECqrgsp4icrJOxhk=",
+      "dev": true
+    },
+    "didyoumean": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/didyoumean/-/didyoumean-1.2.1.tgz",
+      "integrity": "sha1-6S7f2tplN9SE1zwBcv0eugxJdv8=",
+      "dev": true
+    },
+    "ecc-jsbn": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz",
+      "integrity": "sha1-OoOpBOVDUyh4dMVkt1SThoSamMk=",
+      "dev": true,
+      "requires": {
+        "jsbn": "~0.1.0",
+        "safer-buffer": "^2.1.0"
+      }
+    },
+    "emoji-regex": {
+      "version": "7.0.3",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-7.0.3.tgz",
+      "integrity": "sha512-CwBLREIQ7LvYFB0WyRvwhq5N5qPhc6PMjD6bYggFlI5YyDgl+0vxq5VHbMOFqLg7hfWzmu8T5Z1QofhmTIhItA==",
+      "dev": true
+    },
+    "escape-string-regexp": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
+      "integrity": "sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=",
+      "dev": true
+    },
+    "extend": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
+      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==",
+      "dev": true
+    },
+    "external-editor": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/external-editor/-/external-editor-3.1.0.tgz",
+      "integrity": "sha512-hMQ4CX1p1izmuLYyZqLMO/qGNw10wSv9QDCPfzXfyFrOaCSSoRfqE1Kf1s5an66J5JZC62NewG+mK49jOCtQew==",
+      "dev": true,
+      "requires": {
+        "chardet": "^0.7.0",
+        "iconv-lite": "^0.4.24",
+        "tmp": "^0.0.33"
+      }
+    },
+    "extsprintf": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz",
+      "integrity": "sha1-lpGEQOMEGnpBT4xS48V06zw+HgU=",
+      "dev": true
+    },
+    "fast-deep-equal": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-2.0.1.tgz",
+      "integrity": "sha1-ewUhjd+WZ79/Nwv3/bLLFf3Qqkk=",
+      "dev": true
+    },
+    "fast-json-stable-stringify": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.0.0.tgz",
+      "integrity": "sha1-1RQsDK7msRifh9OnYREGT4bIu/I=",
+      "dev": true
+    },
+    "figures": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/figures/-/figures-2.0.0.tgz",
+      "integrity": "sha1-OrGi0qYsi/tDGgyUy3l6L84nyWI=",
+      "dev": true,
+      "requires": {
+        "escape-string-regexp": "^1.0.5"
+      }
+    },
+    "find-up": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/find-up/-/find-up-3.0.0.tgz",
+      "integrity": "sha512-1yD6RmLI1XBfxugvORwlck6f75tYL+iR0jqwsOrOxMZyGYqUuDhJ0l4AXdO1iX/FTs9cBAMEk1gWSEx1kSbylg==",
+      "dev": true,
+      "requires": {
+        "locate-path": "^3.0.0"
+      }
+    },
+    "forever-agent": {
+      "version": "0.6.1",
+      "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz",
+      "integrity": "sha1-+8cfDEGt6zf5bFd60e1C2P2sypE=",
+      "dev": true
+    },
+    "get-caller-file": {
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
+      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
+      "dev": true
+    },
+    "getpass": {
+      "version": "0.1.7",
+      "resolved": "https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz",
+      "integrity": "sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo=",
+      "dev": true,
+      "requires": {
+        "assert-plus": "^1.0.0"
+      }
+    },
+    "har-schema": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz",
+      "integrity": "sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI=",
+      "dev": true
+    },
+    "har-validator": {
+      "version": "5.1.3",
+      "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-5.1.3.tgz",
+      "integrity": "sha512-sNvOCzEQNr/qrvJgc3UG/kD4QtlHycrzwS+6mfTrrSq97BvaYcPZZI1ZSqGSPR73Cxn4LKTD4PttRwfU7jWq5g==",
+      "dev": true,
+      "requires": {
+        "ajv": "^6.5.5",
+        "har-schema": "^2.0.0"
+      }
+    },
+    "has-flag": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
+      "integrity": "sha1-tdRU3CGZriJWmfNGfloH87lVuv0=",
+      "dev": true
+    },
+    "http-signature": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz",
+      "integrity": "sha1-muzZJRFHcvPZW2WmCruPfBj7rOE=",
+      "dev": true,
+      "requires": {
+        "assert-plus": "^1.0.0",
+        "jsprim": "^1.2.2",
+        "sshpk": "^1.7.0"
+      }
+    },
+    "iconv-lite": {
+      "version": "0.4.24",
+      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
+      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
+      "dev": true,
+      "requires": {
+        "safer-buffer": ">= 2.1.2 < 3"
+      }
+    },
+    "inquirer": {
+      "version": "6.5.2",
+      "resolved": "https://registry.npmjs.org/inquirer/-/inquirer-6.5.2.tgz",
+      "integrity": "sha512-cntlB5ghuB0iuO65Ovoi8ogLHiWGs/5yNrtUcKjFhSSiVeAIVpD7koaSU9RM8mpXw5YDi9RdYXGQMaOURB7ycQ==",
+      "dev": true,
+      "requires": {
+        "ansi-escapes": "^3.2.0",
+        "chalk": "^2.4.2",
+        "cli-cursor": "^2.1.0",
+        "cli-width": "^2.0.0",
+        "external-editor": "^3.0.3",
+        "figures": "^2.0.0",
+        "lodash": "^4.17.12",
+        "mute-stream": "0.0.7",
+        "run-async": "^2.2.0",
+        "rxjs": "^6.4.0",
+        "string-width": "^2.1.0",
+        "strip-ansi": "^5.1.0",
+        "through": "^2.3.6"
+      }
+    },
+    "is-fullwidth-code-point": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz",
+      "integrity": "sha1-o7MKXE8ZkYMWeqq5O+764937ZU8=",
+      "dev": true
+    },
+    "is-promise": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/is-promise/-/is-promise-2.1.0.tgz",
+      "integrity": "sha1-eaKp7OfwlugPNtKy87wWwf9L8/o=",
+      "dev": true
+    },
+    "is-typedarray": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
+      "integrity": "sha1-5HnICFjfDBsR3dppQPlgEfzaSpo=",
+      "dev": true
+    },
+    "isstream": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
+      "integrity": "sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo=",
+      "dev": true
+    },
+    "jsbn": {
+      "version": "0.1.1",
+      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
+      "integrity": "sha1-peZUwuWi3rXyAdls77yoDA7y9RM=",
+      "dev": true
+    },
+    "json-fixer": {
+      "version": "1.3.3",
+      "resolved": "https://registry.npmjs.org/json-fixer/-/json-fixer-1.3.3.tgz",
+      "integrity": "sha512-+UpmAba1KuudCrsbw/oZyibEyAbhFkaDoG9RJcSQVMLdSd6LI1dlaKbYbFzx4O6u4WA7TiBYAXHdQs2bMFCbEw==",
+      "dev": true,
+      "requires": {
+        "@babel/runtime": "^7.5.5",
+        "chalk": "^2.4.2",
+        "pegjs": "^0.10.0"
+      }
+    },
+    "json-schema": {
+      "version": "0.2.3",
+      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.2.3.tgz",
+      "integrity": "sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM=",
+      "dev": true
+    },
+    "json-schema-traverse": {
+      "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
+      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
+      "dev": true
+    },
+    "json-stringify-safe": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
+      "integrity": "sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus=",
+      "dev": true
+    },
+    "jsprim": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.1.tgz",
+      "integrity": "sha1-MT5mvB5cwG5Di8G3SZwuXFastqI=",
+      "dev": true,
+      "requires": {
+        "assert-plus": "1.0.0",
+        "extsprintf": "1.3.0",
+        "json-schema": "0.2.3",
+        "verror": "1.10.0"
+      }
+    },
+    "locate-path": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-3.0.0.tgz",
+      "integrity": "sha512-7AO748wWnIhNqAuaty2ZWHkQHRSNfPVIsPIfwEOWO22AmaoVrWavlOcMR5nzTLNYvp36X220/maaRsrec1G65A==",
+      "dev": true,
+      "requires": {
+        "p-locate": "^3.0.0",
+        "path-exists": "^3.0.0"
+      }
+    },
+    "lodash": {
+      "version": "4.17.15",
+      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.15.tgz",
+      "integrity": "sha512-8xOcRHvCjnocdS5cpwXQXVzmmh5e5+saE2QGoeQmbKmRS6J3VQppPOIt0MnmE+4xlZoumy0GPG0D0MVIQbNA1A==",
+      "dev": true
+    },
+    "mime-db": {
+      "version": "1.40.0",
+      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.40.0.tgz",
+      "integrity": "sha512-jYdeOMPy9vnxEqFRRo6ZvTZ8d9oPb+k18PKoYNYUe2stVEBPPwsln/qWzdbmaIvnhZ9v2P+CuecK+fpUfsV2mA==",
+      "dev": true
+    },
+    "mime-types": {
+      "version": "2.1.24",
+      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.24.tgz",
+      "integrity": "sha512-WaFHS3MCl5fapm3oLxU4eYDw77IQM2ACcxQ9RIxfaC3ooc6PFuBMGZZsYpvoXS5D5QTWPieo1jjLdAm3TBP3cQ==",
+      "dev": true,
+      "requires": {
+        "mime-db": "1.40.0"
+      }
+    },
+    "mimic-fn": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-1.2.0.tgz",
+      "integrity": "sha512-jf84uxzwiuiIVKiOLpfYk7N46TSy8ubTonmneY9vrpHNAnp0QBt2BxWV9dO3/j+BoVAb+a5G6YDPW3M5HOdMWQ==",
+      "dev": true
+    },
+    "mute-stream": {
+      "version": "0.0.7",
+      "resolved": "https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.7.tgz",
+      "integrity": "sha1-MHXOk7whuPq0PhvE2n6BFe0ee6s=",
+      "dev": true
+    },
+    "oauth-sign": {
+      "version": "0.9.0",
+      "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.9.0.tgz",
+      "integrity": "sha512-fexhUFFPTGV8ybAtSIGbV6gOkSv8UtRbDBnAyLQw4QPKkgNlsH2ByPGtMUqdWkos6YCRmAqViwgZrJc/mRDzZQ==",
+      "dev": true
+    },
+    "onetime": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/onetime/-/onetime-2.0.1.tgz",
+      "integrity": "sha1-BnQoIw/WdEOyeUsiu6UotoZ5YtQ=",
+      "dev": true,
+      "requires": {
+        "mimic-fn": "^1.0.0"
+      }
+    },
+    "os-tmpdir": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz",
+      "integrity": "sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ=",
+      "dev": true
+    },
+    "p-limit": {
+      "version": "2.2.1",
+      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.2.1.tgz",
+      "integrity": "sha512-85Tk+90UCVWvbDavCLKPOLC9vvY8OwEX/RtKF+/1OADJMVlFfEHOiMTPVyxg7mk/dKa+ipdHm0OUkTvCpMTuwg==",
+      "dev": true,
+      "requires": {
+        "p-try": "^2.0.0"
+      }
+    },
+    "p-locate": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-3.0.0.tgz",
+      "integrity": "sha512-x+12w/To+4GFfgJhBEpiDcLozRJGegY+Ei7/z0tSLkMmxGZNybVMSfWj9aJn8Z5Fc7dBUNJOOVgPv2H7IwulSQ==",
+      "dev": true,
+      "requires": {
+        "p-limit": "^2.0.0"
+      }
+    },
+    "p-try": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
+      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
+      "dev": true
+    },
+    "path-exists": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-3.0.0.tgz",
+      "integrity": "sha1-zg6+ql94yxiSXqfYENe1mwEP1RU=",
+      "dev": true
+    },
+    "pegjs": {
+      "version": "0.10.0",
+      "resolved": "https://registry.npmjs.org/pegjs/-/pegjs-0.10.0.tgz",
+      "integrity": "sha1-z4uvrm7d/0tafvsYUmnqr0YQ3b0=",
+      "dev": true
+    },
+    "performance-now": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
+      "integrity": "sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns=",
+      "dev": true
+    },
+    "pify": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/pify/-/pify-4.0.1.tgz",
+      "integrity": "sha512-uB80kBFb/tfd68bVleG9T5GGsGPjJrLAUpR5PZIrhBnIaRTQRjqdJSsIKkOP6OAIFbj7GOrcudc5pNjZ+geV2g==",
+      "dev": true
+    },
+    "psl": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/psl/-/psl-1.4.0.tgz",
+      "integrity": "sha512-HZzqCGPecFLyoRj5HLfuDSKYTJkAfB5thKBIkRHtGjWwY7p1dAyveIbXIq4tO0KYfDF2tHqPUgY9SDnGm00uFw==",
+      "dev": true
+    },
+    "punycode": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
+      "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==",
+      "dev": true
+    },
+    "regenerator-runtime": {
+      "version": "0.13.3",
+      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.13.3.tgz",
+      "integrity": "sha512-naKIZz2GQ8JWh///G7L3X6LaQUAMp2lvb1rvwwsURe/VXwD6VMfr+/1NuNw3ag8v2kY1aQ/go5SNn79O9JU7yw==",
+      "dev": true
+    },
+    "request": {
+      "version": "2.88.0",
+      "resolved": "https://registry.npmjs.org/request/-/request-2.88.0.tgz",
+      "integrity": "sha512-NAqBSrijGLZdM0WZNsInLJpkJokL72XYjUpnB0iwsRgxh7dB6COrHnTBNwN0E+lHDAJzu7kLAkDeY08z2/A0hg==",
+      "dev": true,
+      "requires": {
+        "aws-sign2": "~0.7.0",
+        "aws4": "^1.8.0",
+        "caseless": "~0.12.0",
+        "combined-stream": "~1.0.6",
+        "extend": "~3.0.2",
+        "forever-agent": "~0.6.1",
+        "form-data": "~2.3.2",
+        "har-validator": "~5.1.0",
+        "http-signature": "~1.2.0",
+        "is-typedarray": "~1.0.0",
+        "isstream": "~0.1.2",
+        "json-stringify-safe": "~5.0.1",
+        "mime-types": "~2.1.19",
+        "oauth-sign": "~0.9.0",
+        "performance-now": "^2.1.0",
+        "qs": "~6.5.2",
+        "safe-buffer": "^5.1.2",
+        "tough-cookie": "~2.4.3",
+        "tunnel-agent": "^0.6.0",
+        "uuid": "^3.3.2"
+      },
+      "dependencies": {
+        "form-data": {
+          "version": "2.3.3",
+          "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.3.3.tgz",
+          "integrity": "sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==",
+          "dev": true,
+          "requires": {
+            "asynckit": "^0.4.0",
+            "combined-stream": "^1.0.6",
+            "mime-types": "^2.1.12"
+          }
+        },
+        "qs": {
+          "version": "6.5.2",
+          "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.2.tgz",
+          "integrity": "sha512-N5ZAX4/LxJmF+7wN74pUD6qAh9/wnvdQcjq9TZjevvXzSUo7bfmw91saqMjzGS2xq91/odN2dW/WOl7qQHNDGA==",
+          "dev": true
+        }
+      }
+    },
+    "require-directory": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
+      "integrity": "sha1-jGStX9MNqxyXbiNE/+f3kqam30I=",
+      "dev": true
+    },
+    "require-main-filename": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/require-main-filename/-/require-main-filename-2.0.0.tgz",
+      "integrity": "sha512-NKN5kMDylKuldxYLSUfrbo5Tuzh4hd+2E8NPPX02mZtn1VuREQToYe/ZdlJy+J3uCpfaiGF05e7B8W0iXbQHmg==",
+      "dev": true
+    },
+    "restore-cursor": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/restore-cursor/-/restore-cursor-2.0.0.tgz",
+      "integrity": "sha1-n37ih/gv0ybU/RYpI9YhKe7g368=",
+      "dev": true,
+      "requires": {
+        "onetime": "^2.0.0",
+        "signal-exit": "^3.0.2"
+      }
+    },
+    "run-async": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/run-async/-/run-async-2.3.0.tgz",
+      "integrity": "sha1-A3GrSuC91yDUFm19/aZP96RFpsA=",
+      "dev": true,
+      "requires": {
+        "is-promise": "^2.1.0"
+      }
+    },
+    "rxjs": {
+      "version": "6.5.3",
+      "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-6.5.3.tgz",
+      "integrity": "sha512-wuYsAYYFdWTAnAaPoKGNhfpWwKZbJW+HgAJ+mImp+Epl7BG8oNWBCTyRM8gba9k4lk8BgWdoYm21Mo/RYhhbgA==",
+      "dev": true,
+      "requires": {
+        "tslib": "^1.9.0"
+      }
+    },
+    "safe-buffer": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.0.tgz",
+      "integrity": "sha512-fZEwUGbVl7kouZs1jCdMLdt95hdIv0ZeHg6L7qPeciMZhZ+/gdesW4wgTARkrFWEpspjEATAzUGPG8N2jJiwbg==",
+      "dev": true
+    },
+    "safer-buffer": {
+      "version": "2.1.2",
+      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
+      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
+      "dev": true
+    },
+    "set-blocking": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
+      "integrity": "sha1-BF+XgtARrppoA93TgrJDkrPYkPc=",
+      "dev": true
+    },
+    "signal-exit": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.2.tgz",
+      "integrity": "sha1-tf3AjxKH6hF4Yo5BXiUTK3NkbG0=",
+      "dev": true
+    },
+    "sshpk": {
+      "version": "1.16.1",
+      "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.16.1.tgz",
+      "integrity": "sha512-HXXqVUq7+pcKeLqqZj6mHFUMvXtOJt1uoUx09pFW6011inTMxqI8BA8PM95myrIyyKwdnzjdFjLiE6KBPVtJIg==",
+      "dev": true,
+      "requires": {
+        "asn1": "~0.2.3",
+        "assert-plus": "^1.0.0",
+        "bcrypt-pbkdf": "^1.0.0",
+        "dashdash": "^1.12.0",
+        "ecc-jsbn": "~0.1.1",
+        "getpass": "^0.1.1",
+        "jsbn": "~0.1.0",
+        "safer-buffer": "^2.0.2",
+        "tweetnacl": "~0.14.0"
+      }
+    },
+    "string-width": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-2.1.1.tgz",
+      "integrity": "sha512-nOqH59deCq9SRHlxq1Aw85Jnt4w6KvLKqWVik6oA9ZklXLNIOlqg4F2yrT1MVaTjAqvVwdfeZ7w7aCvJD7ugkw==",
+      "dev": true,
+      "requires": {
+        "is-fullwidth-code-point": "^2.0.0",
+        "strip-ansi": "^4.0.0"
+      },
+      "dependencies": {
+        "strip-ansi": {
+          "version": "4.0.0",
+          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz",
+          "integrity": "sha1-qEeQIusaw2iocTibY1JixQXuNo8=",
+          "dev": true,
+          "requires": {
+            "ansi-regex": "^3.0.0"
+          }
+        }
+      }
+    },
+    "strip-ansi": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-5.2.0.tgz",
+      "integrity": "sha512-DuRs1gKbBqsMKIZlrffwlug8MHkcnpjs5VPmL1PAh+mA30U0DTotfDZ0d2UUsXpPmPmMMJ6W773MaA3J+lbiWA==",
+      "dev": true,
+      "requires": {
+        "ansi-regex": "^4.1.0"
+      },
+      "dependencies": {
+        "ansi-regex": {
+          "version": "4.1.0",
+          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-4.1.0.tgz",
+          "integrity": "sha512-1apePfXM1UOSqw0o9IiFAovVz9M5S1Dg+4TrDwfMewQ6p/rmMueb7tWZjQ1rx4Loy1ArBggoqGpfqqdI4rondg==",
+          "dev": true
+        }
+      }
+    },
+    "supports-color": {
+      "version": "5.5.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
+      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
+      "dev": true,
+      "requires": {
+        "has-flag": "^3.0.0"
+      }
+    },
+    "through": {
+      "version": "2.3.8",
+      "resolved": "https://registry.npmjs.org/through/-/through-2.3.8.tgz",
+      "integrity": "sha1-DdTJ/6q8NXlgsbckEV1+Doai4fU=",
+      "dev": true
+    },
+    "tmp": {
+      "version": "0.0.33",
+      "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.0.33.tgz",
+      "integrity": "sha512-jRCJlojKnZ3addtTOjdIqoRuPEKBvNXcGYqzO6zWZX8KfKEpnGY5jfggJQ3EjKuu8D4bJRr0y+cYJFmYbImXGw==",
+      "dev": true,
+      "requires": {
+        "os-tmpdir": "~1.0.2"
+      }
+    },
+    "tough-cookie": {
+      "version": "2.4.3",
+      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.4.3.tgz",
+      "integrity": "sha512-Q5srk/4vDM54WJsJio3XNn6K2sCG+CQ8G5Wz6bZhRZoAe/+TxjWB/GlFAnYEbkYVlON9FMk/fE3h2RLpPXo4lQ==",
+      "dev": true,
+      "requires": {
+        "psl": "^1.1.24",
+        "punycode": "^1.4.1"
+      },
+      "dependencies": {
+        "punycode": {
+          "version": "1.4.1",
+          "resolved": "https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz",
+          "integrity": "sha1-wNWmOycYgArY4esPpSachN1BhF4=",
+          "dev": true
+        }
+      }
+    },
+    "tslib": {
+      "version": "1.10.0",
+      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.10.0.tgz",
+      "integrity": "sha512-qOebF53frne81cf0S9B41ByenJ3/IuH8yJKngAX35CmiZySA0khhkovshKK+jGCaMnVomla7gVlIcc3EvKPbTQ==",
+      "dev": true
+    },
+    "tunnel-agent": {
+      "version": "0.6.0",
+      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
+      "integrity": "sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0=",
+      "dev": true,
+      "requires": {
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "tweetnacl": {
+      "version": "0.14.5",
+      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
+      "integrity": "sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q=",
+      "dev": true
+    },
+    "uri-js": {
+      "version": "4.2.2",
+      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.2.2.tgz",
+      "integrity": "sha512-KY9Frmirql91X2Qgjry0Wd4Y+YTdrdZheS8TFwvkbLWf/G5KNJDCh6pKL5OZctEW4+0Baa5idK2ZQuELRwPznQ==",
+      "dev": true,
+      "requires": {
+        "punycode": "^2.1.0"
+      }
+    },
+    "uuid": {
+      "version": "3.3.3",
+      "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.3.3.tgz",
+      "integrity": "sha512-pW0No1RGHgzlpHJO1nsVrHKpOEIxkGg1xB+v0ZmdNH5OAeAwzAVrCnI2/6Mtx+Uys6iaylxa+D3g4j63IKKjSQ==",
+      "dev": true
+    },
+    "verror": {
+      "version": "1.10.0",
+      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
+      "integrity": "sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA=",
+      "dev": true,
+      "requires": {
+        "assert-plus": "^1.0.0",
+        "core-util-is": "1.0.2",
+        "extsprintf": "^1.2.0"
+      }
+    },
+    "which-module": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/which-module/-/which-module-2.0.0.tgz",
+      "integrity": "sha1-2e8H3Od7mQK4o6j6SzHD4/fm6Ho=",
+      "dev": true
+    },
+    "wrap-ansi": {
+      "version": "5.1.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-5.1.0.tgz",
+      "integrity": "sha512-QC1/iN/2/RPVJ5jYK8BGttj5z83LmSKmvbvrXPNCLZSEb32KKVDJDl/MOt2N01qU2H/FkzEa9PKto1BqDjtd7Q==",
+      "dev": true,
+      "requires": {
+        "ansi-styles": "^3.2.0",
+        "string-width": "^3.0.0",
+        "strip-ansi": "^5.0.0"
+      },
+      "dependencies": {
+        "string-width": {
+          "version": "3.1.0",
+          "resolved": "https://registry.npmjs.org/string-width/-/string-width-3.1.0.tgz",
+          "integrity": "sha512-vafcv6KjVZKSgz06oM/H6GDBrAtz8vdhQakGjFIvNrHA6y3HCF1CInLy+QLq8dTJPQ1b+KDUqDFctkdRW44e1w==",
+          "dev": true,
+          "requires": {
+            "emoji-regex": "^7.0.1",
+            "is-fullwidth-code-point": "^2.0.0",
+            "strip-ansi": "^5.1.0"
+          }
+        }
+      }
+    },
+    "y18n": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/y18n/-/y18n-4.0.0.tgz",
+      "integrity": "sha512-r9S/ZyXu/Xu9q1tYlpsLIsa3EeLXXk0VwlxqTcFRfg9EhMW+17kbt9G0NrgCmhGb5vT2hyhJZLfDGx+7+5Uj/w==",
+      "dev": true
+    },
+    "yargs": {
+      "version": "14.0.0",
+      "resolved": "https://registry.npmjs.org/yargs/-/yargs-14.0.0.tgz",
+      "integrity": "sha512-ssa5JuRjMeZEUjg7bEL99AwpitxU/zWGAGpdj0di41pOEmJti8NR6kyUIJBkR78DTYNPZOU08luUo0GTHuB+ow==",
+      "dev": true,
+      "requires": {
+        "cliui": "^5.0.0",
+        "decamelize": "^1.2.0",
+        "find-up": "^3.0.0",
+        "get-caller-file": "^2.0.1",
+        "require-directory": "^2.1.1",
+        "require-main-filename": "^2.0.0",
+        "set-blocking": "^2.0.0",
+        "string-width": "^3.0.0",
+        "which-module": "^2.0.0",
+        "y18n": "^4.0.0",
+        "yargs-parser": "^13.1.1"
+      },
+      "dependencies": {
+        "string-width": {
+          "version": "3.1.0",
+          "resolved": "https://registry.npmjs.org/string-width/-/string-width-3.1.0.tgz",
+          "integrity": "sha512-vafcv6KjVZKSgz06oM/H6GDBrAtz8vdhQakGjFIvNrHA6y3HCF1CInLy+QLq8dTJPQ1b+KDUqDFctkdRW44e1w==",
+          "dev": true,
+          "requires": {
+            "emoji-regex": "^7.0.1",
+            "is-fullwidth-code-point": "^2.0.0",
+            "strip-ansi": "^5.1.0"
+          }
+        }
+      }
+    },
+    "yargs-parser": {
+      "version": "13.1.1",
+      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-13.1.1.tgz",
+      "integrity": "sha512-oVAVsHz6uFrg3XQheFII8ESO2ssAf9luWuAd6Wexsu4F3OtIW0o8IribPXYrD4WC24LWtPrJlGy87y5udK+dxQ==",
+      "dev": true,
+      "requires": {
+        "camelcase": "^5.0.0",
+        "decamelize": "^1.2.0"
+      }
+    }
+  }
+}
diff --git a/package.json b/package.json
new file mode 100644
index 0000000..67b9254
--- /dev/null
+++ b/package.json
@@ -0,0 +1,23 @@
+{
+  "name": "docs",
+  "version": "1.0.0",
+  "description": "8Base Documentation",
+  "devDependencies": {
+    "all-contributors-cli": "^6.9.1"
+  },
+  "scripts": {
+    "contributors:add": "all-contributors add",
+    "contributors:check": "all-contributors check",
+    "contributors:generate": "all-contributors generate"    
+  },
+  "repository": {
+    "type": "git",
+    "url": "git+https://github.com/8base/Documentation.git"
+  },
+  "author": "8base, Inc",
+  "license": "ISC",
+  "bugs": {
+    "url": "https://github.com/8base/Documentation/issues"
+  },
+  "homepage": "https://github.com/8base/Documentation#readme"
+}
